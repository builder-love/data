{"version":3,"file":"static/chunks/1900.bb8e4b967a217d93.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/hooks/useFavicon.tsx","webpack://_N_E/../ui-core/src/runs/Run.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetCheckTags.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetTags.tsx","webpack://_N_E/../ui-core/src/runs/RunHeaderActions.tsx","webpack://_N_E/../ui-core/src/runs/RunTimingTags.tsx","webpack://_N_E/../ui-core/src/runs/TickTagForRun.tsx","webpack://_N_E/../ui-core/src/assets/AutomaterializeTagWithEvaluation.tsx","webpack://_N_E/../ui-core/src/runs/RunRoot.tsx","webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx"],"sourcesContent":["import {useEffect} from 'react';\n\nexport const useFavicon = (href: string) => {\n  useEffect(() => {\n    const el = document.querySelector('link[rel=\"icon\"][type=\"image/svg+xml\"]');\n    if (!el) {\n      return;\n    }\n    const previousHref = el.getAttribute('href');\n    el.setAttribute('href', href);\n    return () => {\n      if (previousHref) {\n        el.setAttribute('href', previousHref);\n      }\n    };\n  }, [href]);\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  ErrorBoundary,\n  Icon,\n  NonIdealState,\n  SplitPanelContainer,\n  SplitPanelContainerHandle,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {memo, useLayoutEffect, useMemo, useRef, useState} from 'react';\nimport {FeatureFlag} from 'shared/app/FeatureFlags.oss';\nimport styled from 'styled-components';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogType, LogsToolbar} from './LogsToolbar';\nimport {RunActionButtons} from './RunActionButtons';\nimport {RunContext} from './RunContext';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {RunDagsterRunEventFragment, RunPageFragment} from './types/RunFragments.types';\nimport {\n  matchingComputeLogKeyFromStepKey,\n  useComputeLogFileKeyForSelection,\n} from './useComputeLogFileKeyForSelection';\nimport {useQueryPersistedLogFilter} from './useQueryPersistedLogFilter';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {featureEnabled} from '../app/Flags';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {GanttChart, GanttChartLoadingState, GanttChartMode, QueuedState} from '../gantt/GanttChart';\nimport {toGraphQueryItems} from '../gantt/toGraphQueryItems';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useFavicon} from '../hooks/useFavicon';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {CompletionType, useTraceDependency} from '../performance/TraceContext';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\n\ninterface RunProps {\n  runId: string;\n  run?: RunPageFragment;\n}\n\nconst runStatusFavicon = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.FAILURE:\n      return '/favicon-run-failed.svg';\n    case RunStatus.SUCCESS:\n      return '/favicon-run-success.svg';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n    case RunStatus.CANCELING:\n      return '/favicon-run-pending.svg';\n    default:\n      return '/favicon.svg';\n  }\n};\n\nexport const Run = memo((props: RunProps) => {\n  const {run, runId} = props;\n  const [logsFilter, setLogsFilter] = useQueryPersistedLogFilter();\n  const [selectionQuery, setSelectionQuery] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n  });\n\n  useFavicon(run ? runStatusFavicon(run.status) : '/favicon.svg');\n  useDocumentTitle(\n    run\n      ? `${!isHiddenAssetGroupJob(run.pipelineName) ? run.pipelineName : ''} ${runId.slice(\n          0,\n          8,\n        )} [${run.status}]`\n      : `Run: ${runId}`,\n  );\n\n  const onShowStateDetails = (stepKey: string, logs: RunDagsterRunEventFragment[]) => {\n    const errorNode = logs.find(\n      (node) => node.__typename === 'ExecutionStepFailureEvent' && node.stepKey === stepKey,\n    );\n\n    if (errorNode) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={errorNode} />,\n      });\n    }\n  };\n\n  const onSetSelectionQuery = (query: string) => {\n    setSelectionQuery(query);\n    setLogsFilter({\n      ...logsFilter,\n      logQuery: query !== '*' ? [{token: 'query', value: query}] : [],\n    });\n  };\n\n  const logsDependency = useTraceDependency('RunLogs');\n\n  return (\n    <RunContext.Provider value={run}>\n      <LogsProvider key={runId} runId={runId}>\n        {(logs) => (\n          <>\n            <OnLogsLoaded dependency={logsDependency} logs={logs} />\n            <RunMetadataProvider logs={logs}>\n              {(metadata) => (\n                <RunWithData\n                  run={run}\n                  runId={runId}\n                  logs={logs}\n                  logsFilter={logsFilter}\n                  metadata={metadata}\n                  selectionQuery={selectionQuery}\n                  onSetLogsFilter={setLogsFilter}\n                  onSetSelectionQuery={onSetSelectionQuery}\n                  onShowStateDetails={onShowStateDetails}\n                />\n              )}\n            </RunMetadataProvider>\n          </>\n        )}\n      </LogsProvider>\n    </RunContext.Provider>\n  );\n});\n\nconst OnLogsLoaded = ({\n  dependency,\n  logs,\n}: {\n  dependency: ReturnType<typeof useTraceDependency>;\n  logs: LogsProviderLogs;\n}) => {\n  useLayoutEffect(() => {\n    if (!logs.loading) {\n      dependency.completeDependency(CompletionType.SUCCESS);\n    }\n  }, [dependency, logs]);\n  return null;\n};\n\ninterface RunWithDataProps {\n  run?: RunPageFragment;\n  runId: string;\n  selectionQuery: string;\n  logs: LogsProviderLogs;\n  logsFilter: LogFilter;\n  metadata: IRunMetadataDict;\n  onSetLogsFilter: (v: LogFilter) => void;\n  onSetSelectionQuery: (query: string) => void;\n  onShowStateDetails: (stepKey: string, logs: RunDagsterRunEventFragment[]) => void;\n}\n\nconst logTypeFromQuery = (queryLogType: string) => {\n  switch (queryLogType) {\n    case 'stdout':\n      return LogType.stdout;\n    case 'stderr':\n      return LogType.stderr;\n    default:\n      return LogType.structured;\n  }\n};\n\n/**\n * Note: There are two places we keep a \"step query string\" in the Run view:\n * selectionQuery and logsFilter.logsQuery.\n *\n * - selectionQuery is set when you click around in the Gannt view and is the\n *   selection used for re-execution, etc. When set, we autofill logsFilter.logsQuery.\n *\n * - logsFilter.logsQuery is used for filtering the logs. It can be cleared separately\n *   from the selectionQuery, so you can select a step but navigate elsewhere in the logs.\n *\n * We could revisit this in the future but I believe we iterated quite a bit to get to this\n * solution and we should avoid locking the two filter inputs together completely.\n */\nconst RunWithData = ({\n  run,\n  runId,\n  logs,\n  logsFilter,\n  metadata,\n  selectionQuery,\n  onSetLogsFilter,\n  onSetSelectionQuery,\n}: RunWithDataProps) => {\n  const newRunSelectionSyntax = featureEnabled(FeatureFlag.flagSelectionSyntax);\n\n  const [queryLogType, setQueryLogType] = useQueryPersistedState<string>({\n    queryKey: 'logType',\n    defaults: {logType: LogType.structured},\n  });\n\n  const logType = logTypeFromQuery(queryLogType);\n  const setLogType = (lt: LogType) => setQueryLogType(LogType[lt]);\n  const [computeLogUrl, setComputeLogUrl] = useState<string | null>(null);\n\n  const stepKeysJSON = JSON.stringify(Object.keys(metadata.steps).sort());\n  const stepKeys = useMemo(() => JSON.parse(stepKeysJSON), [stepKeysJSON]);\n\n  const runtimeGraph = run?.executionPlan && toGraphQueryItems(run?.executionPlan, metadata.steps);\n\n  const selectionStepKeys = useMemo(() => {\n    return runtimeGraph && selectionQuery && selectionQuery !== '*'\n      ? filterRunSelectionByQuery(runtimeGraph, selectionQuery).all.map((n) => n.name)\n      : [];\n  }, [runtimeGraph, selectionQuery]);\n\n  const selection = useMemo(\n    () => ({\n      query: selectionQuery,\n      keys: selectionStepKeys,\n    }),\n    [selectionStepKeys, selectionQuery],\n  );\n\n  const {logCaptureInfo, computeLogFileKey, setComputeLogFileKey} =\n    useComputeLogFileKeyForSelection({\n      stepKeys,\n      selectionStepKeys,\n      metadata,\n      defaultToFirstStep: false,\n    });\n\n  const logsFilterStepKeys = useMemo(\n    () =>\n      runtimeGraph\n        ? logsFilter.logQuery\n            .filter((v) => v.token && v.token === 'query')\n            .reduce((accum, v) => {\n              accum.push(\n                ...filterRunSelectionByQuery(runtimeGraph, v.value).all.map((n) => n.name),\n              );\n              return accum;\n            }, [] as string[])\n        : [],\n    [logsFilter.logQuery, runtimeGraph],\n  );\n\n  const onClickStep = (stepKey: string, evt: React.MouseEvent<any>) => {\n    const index = selectionStepKeys.indexOf(stepKey);\n    let newSelected: string[] = [];\n    const filterForExactStep = `\"${stepKey}\"`;\n    let nextSelectionQuery = selectionQuery;\n    if (evt.shiftKey) {\n      // shift-click to multi select steps, preserving quotations if present\n      newSelected = [\n        ...selectionStepKeys.map((k) => (selectionQuery.includes(`\"${k}\"`) ? `\"${k}\"` : k)),\n      ];\n\n      if (index !== -1) {\n        // deselect the step if already selected\n        if (newRunSelectionSyntax) {\n          nextSelectionQuery = removeStepFromSelection(nextSelectionQuery, stepKey);\n        } else {\n          newSelected.splice(index, 1);\n        }\n      } else {\n        // select the step otherwise\n        if (newRunSelectionSyntax) {\n          nextSelectionQuery = addStepToSelection(nextSelectionQuery, stepKey);\n        } else {\n          newSelected.push(filterForExactStep);\n        }\n      }\n    } else {\n      // deselect the step if already selected\n      if (selectionStepKeys.length === 1 && index !== -1) {\n        if (newRunSelectionSyntax) {\n          nextSelectionQuery = '';\n        } else {\n          newSelected = [];\n        }\n      } else {\n        // select the step otherwise\n        if (newRunSelectionSyntax) {\n          nextSelectionQuery = `name:\"${stepKey}\"`;\n        } else {\n          newSelected = [filterForExactStep];\n        }\n\n        // When only one step is selected, set the compute log key as well.\n        const matchingLogKey = matchingComputeLogKeyFromStepKey(metadata.logCaptureSteps, stepKey);\n        if (matchingLogKey) {\n          setComputeLogFileKey(matchingLogKey);\n        }\n      }\n    }\n\n    if (newRunSelectionSyntax) {\n      onSetSelectionQuery(nextSelectionQuery);\n    } else {\n      onSetSelectionQuery(newSelected.join(', ') || '*');\n    }\n  };\n\n  const [expandedPanel, setExpandedPanel] = useState<null | 'top' | 'bottom'>(null);\n  const containerRef = useRef<SplitPanelContainerHandle>(null);\n\n  useLayoutEffect(() => {\n    if (containerRef.current) {\n      const size = containerRef.current.getSize();\n      if (size === 100) {\n        setExpandedPanel('top');\n      } else if (size === 0) {\n        setExpandedPanel('bottom');\n      }\n    }\n  }, []);\n\n  const isTopExpanded = expandedPanel === 'top';\n  const isBottomExpanded = expandedPanel === 'bottom';\n\n  const expandBottomPanel = () => {\n    containerRef.current?.changeSize(0);\n    setExpandedPanel('bottom');\n  };\n  const expandTopPanel = () => {\n    containerRef.current?.changeSize(100);\n    setExpandedPanel('top');\n  };\n  const resetPanels = () => {\n    containerRef.current?.changeSize(50);\n    setExpandedPanel(null);\n  };\n\n  const gantt = (metadata: IRunMetadataDict) => {\n    if (!run) {\n      return <GanttChartLoadingState runId={runId} />;\n    }\n\n    if (run.status === 'QUEUED') {\n      return <QueuedState run={run} />;\n    }\n\n    if (run.executionPlan && runtimeGraph) {\n      return (\n        <ErrorBoundary region=\"gantt chart\">\n          <GanttChart\n            options={{\n              mode: GanttChartMode.WATERFALL_TIMED,\n            }}\n            toolbarActions={\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                <Tooltip content={isTopExpanded ? 'Collapse' : 'Expand'}>\n                  <Button\n                    icon={<Icon name={isTopExpanded ? 'collapse_arrows' : 'expand_arrows'} />}\n                    onClick={isTopExpanded ? resetPanels : expandTopPanel}\n                  />\n                </Tooltip>\n                <RunActionButtons\n                  run={run}\n                  graph={runtimeGraph}\n                  metadata={metadata}\n                  selection={selection}\n                />\n              </Box>\n            }\n            runId={runId}\n            graph={runtimeGraph}\n            metadata={metadata}\n            selection={selection}\n            onClickStep={onClickStep}\n            onSetSelection={onSetSelectionQuery}\n            focusedTime={logsFilter.focusedTime}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    return <NonIdealState icon=\"error\" title=\"Unable to build execution plan\" />;\n  };\n\n  return (\n    <>\n      <SplitPanelContainer\n        ref={containerRef}\n        axis=\"vertical\"\n        identifier=\"run-gantt\"\n        firstInitialPercent={35}\n        firstMinSize={56}\n        first={gantt(metadata)}\n        secondMinSize={56}\n        second={\n          <ErrorBoundary region=\"logs\">\n            <LogsContainer>\n              <LogsToolbar\n                logType={logType}\n                onSetLogType={setLogType}\n                filter={logsFilter}\n                onSetFilter={onSetLogsFilter}\n                steps={stepKeys}\n                metadata={metadata}\n                computeLogFileKey={computeLogFileKey}\n                onSetComputeLogKey={setComputeLogFileKey}\n                computeLogUrl={computeLogUrl}\n                counts={logs.counts}\n                isSectionExpanded={isBottomExpanded}\n                toggleExpanded={isBottomExpanded ? resetPanels : expandBottomPanel}\n              />\n              {logType !== LogType.structured ? (\n                !computeLogFileKey ? (\n                  <NoStepSelectionState type={logType} />\n                ) : (\n                  <CapturedOrExternalLogPanel\n                    logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n                    logCaptureInfo={logCaptureInfo}\n                    visibleIOType={LogType[logType]}\n                    onSetDownloadUrl={setComputeLogUrl}\n                  />\n                )\n              ) : (\n                <LogsScrollingTable\n                  logs={logs}\n                  filter={logsFilter}\n                  filterStepKeys={logsFilterStepKeys}\n                  filterKey={`${JSON.stringify(logsFilter)}`}\n                  metadata={metadata}\n                />\n              )}\n            </LogsContainer>\n          </ErrorBoundary>\n        }\n      />\n    </>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst NoStepSelectionState = ({type}: {type: LogType}) => {\n  return (\n    <Box\n      flex={{\n        direction: 'row',\n        grow: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      style={{background: Colors.backgroundDefault()}}\n    >\n      <NonIdealState\n        title={`Select a step to view ${type}`}\n        icon=\"warning\"\n        description=\"Select a step on the Gantt chart or from the dropdown above to view logs.\"\n      />\n    </Box>\n  );\n};\n\nfunction removeStepFromSelection(selectionQuery: string, stepKey: string) {\n  return `(${selectionQuery}) and not name:\"${stepKey}\"`;\n}\n\nfunction addStepToSelection(selectionQuery: string, stepKey: string) {\n  return `(${selectionQuery}) or name:\"${stepKey}\"`;\n}\n","import {AssetCheckTagCollection} from './AssetTagCollections';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunAssetChecksQuery, RunAssetChecksQueryVariables} from './types/RunAssetCheckTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetCheckTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetChecksQuery, RunAssetChecksQueryVariables>(\n    RUN_ASSETS_CHECKS_QUERY,\n    {\n      variables: {runId: run.id},\n      skip,\n    },\n  );\n  const {data, loading} = queryResult;\n\n  if (loading || !data || data.pipelineRunOrError.__typename !== 'Run') {\n    return null;\n  }\n\n  const assetChecks = skip ? run.assetCheckSelection : data.pipelineRunOrError.assetChecks;\n\n  return <AssetCheckTagCollection useTags assetChecks={assetChecks} />;\n};\n\nconst RUN_ASSETS_CHECKS_QUERY = gql`\n  query RunAssetChecksQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assetChecks {\n          name\n          assetKey {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","import {useMemo} from 'react';\n\nimport {AssetKeyTagCollection} from './AssetTagCollections';\nimport {assetKeysForRun} from './RunUtils';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunAssetsQuery, RunAssetsQueryVariables} from './types/RunAssetTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetsQuery, RunAssetsQueryVariables>(RUN_ASSETS_QUERY, {\n    variables: {runId: run.id},\n    skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const assetKeys = useMemo(() => {\n    const {data, loading} = queryResult;\n    if (loading || !data || data.pipelineRunOrError.__typename !== 'Run') {\n      return null;\n    }\n\n    return skip ? assetKeysForRun(run) : data.pipelineRunOrError.assets.map((a) => a.key);\n  }, [queryResult, run, skip]);\n\n  return <AssetKeyTagCollection useTags assetKeys={assetKeys} />;\n};\n\nconst RUN_ASSETS_QUERY = gql`\n  query RunAssetsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assets {\n          id\n          key {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","import {Button, Group, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {RunMetricsDialog} from 'shared/runs/RunMetricsDialog.oss';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {QueuedRunCriteriaDialog} from './QueuedRunCriteriaDialog';\nimport {RunConfigDialog} from './RunConfigDialog';\nimport {doneStatuses} from './RunStatuses';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {useMutation} from '../apollo-client';\nimport {RunFragment} from './types/RunFragments.types';\nimport {AppContext} from '../app/AppContext';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useCopyToClipboard} from '../app/browser';\nimport {RunStatus} from '../graphql/types';\nimport {FREE_CONCURRENCY_SLOTS_MUTATION} from '../instance/InstanceConcurrency';\nimport {\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n} from '../instance/types/InstanceConcurrency.types';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {workspacePipelineLinkForRun, workspacePipelinePath} from '../workspace/workspacePath';\n\ntype VisibleDialog =\n  | 'config'\n  | 'delete'\n  | 'terminate'\n  | 'queue-criteria'\n  | 'free_slots'\n  | 'metrics'\n  | null;\n\nexport const RunHeaderActions = ({run, isJob}: {run: RunFragment; isJob: boolean}) => {\n  const {runConfigYaml} = run;\n  const runMetricsEnabled = run.hasRunMetricsEnabled;\n\n  const [visibleDialog, setVisibleDialog] = useState<VisibleDialog>(null);\n\n  const {rootServerURI} = useContext(AppContext);\n  const {refetch} = useContext(RunsQueryRefetchContext);\n\n  const copy = useCopyToClipboard();\n  const history = useHistory();\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  const copyConfig = async () => {\n    copy(runConfigYaml);\n    await showSharedToaster({\n      intent: 'success',\n      icon: 'copy_to_clipboard_done',\n      message: 'Copied!',\n    });\n  };\n\n  const freeConcurrencySlots = async () => {\n    const resp = await freeSlots({variables: {runId: run.id}});\n    if (resp.data?.freeConcurrencySlots) {\n      await showSharedToaster({\n        intent: 'success',\n        icon: 'check_circle',\n        message: 'Freed concurrency slots',\n      });\n    }\n  };\n\n  const jobLink = workspacePipelineLinkForRun({\n    repositoryName: run.repositoryOrigin?.repositoryName,\n    repositoryLocationName: run.repositoryOrigin?.repositoryLocationName,\n    run,\n    isJob,\n  });\n\n  return (\n    <div>\n      <Group direction=\"row\" spacing={8}>\n        {jobLink.disabledReason ? (\n          <Tooltip content={jobLink.disabledReason} useDisabledButtonTooltipFix>\n            <Button icon={<Icon name={jobLink.icon} />} disabled>\n              {jobLink.label}\n            </Button>\n          </Tooltip>\n        ) : (\n          <AnchorButton icon={<Icon name={jobLink.icon} />} to={jobLink.to}>\n            {jobLink.label}\n          </AnchorButton>\n        )}\n        <Button icon={<Icon name=\"tag\" />} onClick={() => setVisibleDialog('config')}>\n          View tags and config\n        </Button>\n        <Popover\n          position=\"bottom-right\"\n          content={\n            <Menu>\n              <Tooltip\n                content=\"Loadable in dagster-webserver-debug\"\n                position=\"left\"\n                targetTagName=\"div\"\n              >\n                <MenuItem\n                  text=\"Download debug file\"\n                  icon=\"download_for_offline\"\n                  // eslint-disable-next-line no-restricted-properties\n                  onClick={() => window.open(`${rootServerURI}/download_debug/${run.id}`)}\n                />\n              </Tooltip>\n              {run.status === RunStatus.QUEUED ? (\n                <MenuItem\n                  tagName=\"button\"\n                  icon=\"history_toggle_off\"\n                  text=\"View queue criteria\"\n                  intent=\"none\"\n                  onClick={() => setVisibleDialog('queue-criteria')}\n                />\n              ) : null}\n              {runMetricsEnabled && RunMetricsDialog ? (\n                <MenuItem\n                  tagName=\"button\"\n                  icon=\"asset_plot\"\n                  text=\"View container metrics\"\n                  intent=\"none\"\n                  onClick={() => setVisibleDialog('metrics')}\n                />\n              ) : null}\n              {run.hasConcurrencyKeySlots && doneStatuses.has(run.status) ? (\n                <MenuItem\n                  text=\"Free concurrency slots\"\n                  icon=\"lock\"\n                  onClick={freeConcurrencySlots}\n                />\n              ) : null}\n              {run.hasDeletePermission ? (\n                <MenuItem\n                  icon=\"delete\"\n                  text=\"Delete\"\n                  intent=\"danger\"\n                  onClick={() => setVisibleDialog('delete')}\n                />\n              ) : null}\n            </Menu>\n          }\n        >\n          <Button icon={<Icon name=\"expand_more\" />} />\n        </Popover>\n      </Group>\n      <RunConfigDialog\n        isOpen={visibleDialog === 'config'}\n        onClose={() => setVisibleDialog(null)}\n        copyConfig={() => copyConfig()}\n        mode={run.mode}\n        runConfigYaml={run.runConfigYaml}\n        tags={run.tags}\n        isJob={isJob}\n      />\n      {run.status === RunStatus.QUEUED ? (\n        <QueuedRunCriteriaDialog\n          run={run}\n          isOpen={visibleDialog === 'queue-criteria'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {runMetricsEnabled && RunMetricsDialog ? (\n        <RunMetricsDialog\n          runId={run.id}\n          isOpen={visibleDialog === 'metrics'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {run.hasDeletePermission ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            if (run.repositoryOrigin) {\n              history.push(\n                workspacePipelinePath({\n                  repoName: run.repositoryOrigin.repositoryName,\n                  repoLocation: run.repositoryOrigin.repositoryLocationName,\n                  pipelineName: run.pipelineName,\n                  isJob,\n                  path: '/runs',\n                }),\n              );\n            } else {\n              setVisibleDialog(null);\n            }\n          }}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.hasTerminatePermission ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            refetch();\n          }}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {RunTimingDetails} from './RunTimingDetails';\nimport {RunTimingFragment} from './types/RunTimingDetails.types';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const RunTimingTags = ({loading, run}: {loading: boolean; run: RunTimingFragment}) => {\n  return (\n    <>\n      {run?.startTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"schedule\">\n            <TimestampDisplay\n              timestamp={run.startTime}\n              timeFormat={{showSeconds: true, showTimezone: false}}\n            />\n          </Tag>\n        </Popover>\n      ) : run.updateTime ? (\n        <Tag icon=\"schedule\">\n          <TimestampDisplay\n            timestamp={run.updateTime}\n            timeFormat={{showSeconds: true, showTimezone: false}}\n          />\n        </Tag>\n      ) : undefined}\n      {run?.startTime && run?.endTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"timer\">\n            <span style={{fontVariantNumeric: 'tabular-nums'}}>\n              {run?.startTime\n                ? formatElapsedTimeWithoutMsec(\n                    (run?.endTime * 1000 || Date.now()) - run?.startTime * 1000,\n                  )\n                : '–'}\n            </span>\n          </Tag>\n        </Popover>\n      ) : null}\n    </>\n  );\n};\n","import {Box, MiddleTruncate, Tag} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {DagsterTag} from './RunTag';\nimport {InstigationSelector} from '../graphql/types';\nimport {TickDetailsDialog} from '../instigation/TickDetailsDialog';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TagActionsPopover} from '../ui/TagActions';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  instigationSelector: InstigationSelector;\n  instigationType: DagsterTag.SensorName | DagsterTag.ScheduleName;\n  tickId: string;\n}\n\nexport const TickTagForRun = ({instigationSelector, instigationType, tickId}: Props) => {\n  const [showDetails, setShowDetails] = useState(false);\n  const [showLogs, setShowLogs] = useState(false);\n  const icon = instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensors';\n  const {name, repositoryName, repositoryLocationName} = instigationSelector;\n  const repoAddress = buildRepoAddress(repositoryName, repositoryLocationName);\n\n  const actions = [\n    {\n      label: `View ${instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensor'}`,\n      to: workspacePathFromAddress(\n        repoAddress,\n        `${instigationType === DagsterTag.ScheduleName ? '/schedules' : '/sensors'}/${name}`,\n      ),\n    },\n    {\n      label: 'View tick details',\n      onClick: () => setShowDetails(true),\n    },\n    {\n      label: 'View tick logs',\n      onClick: () => setShowLogs(true),\n    },\n  ];\n\n  return (\n    <>\n      <TagActionsPopover actions={actions} data={{key: 'Launched by', value: name}}>\n        <Tag icon={icon}>\n          <Box flex={{direction: 'row'}}>\n            <span>Launched by&nbsp;</span>\n            <div style={{maxWidth: '140px'}}>\n              <MiddleTruncate text={name} />\n            </div>\n          </Box>\n        </Tag>\n      </TagActionsPopover>\n      <TickDetailsDialog\n        isOpen={showDetails}\n        tickResultType=\"runs\"\n        onClose={() => setShowDetails(false)}\n        instigationSelector={instigationSelector}\n        tickId={tickId}\n      />\n      <TickLogDialog\n        isOpen={showLogs}\n        onClose={() => setShowLogs(false)}\n        instigationSelector={instigationSelector}\n        tickId={tickId}\n      />\n    </>\n  );\n};\n","import {Box, ButtonLink, Icon, MiddleTruncate, Popover, Tag} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {EvaluationDetailDialog} from './AutoMaterializePolicyPage/EvaluationDetailDialog';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n\ntype OpenEvaluation = {\n  assetKeyPath: string[];\n  evaluationId: string;\n};\n\ninterface Props {\n  assetKeys: AssetKey[];\n  evaluationId: string;\n}\n\nexport const AutomaterializeTagWithEvaluation = ({assetKeys, evaluationId}: Props) => {\n  const [openEvaluation, setOpenEvaluation] = useState<OpenEvaluation | null>(null);\n\n  const sortedKeys = useMemo(() => {\n    return [...assetKeys].sort((a, b) => COLLATOR.compare(a.path.join('/'), b.path.join('/')));\n  }, [assetKeys]);\n\n  return (\n    <>\n      <Popover\n        placement=\"bottom\"\n        content={\n          <div style={{width: '400px'}}>\n            <Box padding={{vertical: 8, horizontal: 12}} border=\"bottom\" style={{fontWeight: 600}}>\n              Automation condition\n            </Box>\n            <Box\n              flex={{direction: 'column', gap: 16}}\n              padding={{vertical: 12}}\n              style={{maxHeight: '220px', overflowY: 'auto'}}\n            >\n              {sortedKeys.map((assetKey) => {\n                const url = assetDetailsPathForKey(assetKey, {\n                  view: 'automation',\n                  evaluation: evaluationId,\n                });\n                return (\n                  <Box\n                    key={url}\n                    padding={{vertical: 8, left: 12, right: 16}}\n                    flex={{\n                      direction: 'row',\n                      justifyContent: 'space-between',\n                      alignItems: 'center',\n                      gap: 16,\n                    }}\n                    style={{overflow: 'hidden'}}\n                  >\n                    <Box\n                      flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                      style={{overflow: 'hidden'}}\n                    >\n                      <Icon name=\"asset\" />\n                      <MiddleTruncate text={assetKey.path.join('/')} />\n                    </Box>\n                    <ButtonLink\n                      onClick={() => setOpenEvaluation({assetKeyPath: assetKey.path, evaluationId})}\n                      style={{whiteSpace: 'nowrap'}}\n                    >\n                      View evaluation\n                    </ButtonLink>\n                  </Box>\n                );\n              })}\n            </Box>\n          </div>\n        }\n        interactionKind=\"hover\"\n      >\n        <Tag icon=\"automation_condition\">Automation condition</Tag>\n      </Popover>\n      <EvaluationDetailDialog\n        assetKeyPath={openEvaluation?.assetKeyPath ?? []}\n        isOpen={!!openEvaluation}\n        onClose={() => setOpenEvaluation(null)}\n        evaluationID={openEvaluation?.evaluationId ?? ''}\n      />\n    </>\n  );\n};\n","import {\n  Box,\n  Colors,\n  FontFamily,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link, useParams} from 'react-router-dom';\n\nimport {Run} from './Run';\nimport {RunAssetCheckTags} from './RunAssetCheckTags';\nimport {RunAssetTags} from './RunAssetTags';\nimport {RUN_PAGE_FRAGMENT} from './RunFragments';\nimport {RunHeaderActions} from './RunHeaderActions';\nimport {RunStatusTag} from './RunStatusTag';\nimport {DagsterTag, RunTag} from './RunTag';\nimport {RunTimingTags} from './RunTimingTags';\nimport {getBackfillPath} from './RunsFeedUtils';\nimport {TickTagForRun} from './TickTagForRun';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunPageFragment} from './types/RunFragments.types';\nimport {RunRootQuery, RunRootQueryVariables} from './types/RunRoot.types';\nimport {useFeatureFlags} from '../app/Flags';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AutomaterializeTagWithEvaluation} from '../assets/AutomaterializeTagWithEvaluation';\nimport {InstigationSelector} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nexport const RunRoot = () => {\n  useTrackPageView();\n\n  const {runId} = useParams<{runId: string}>();\n  useDocumentTitle(runId ? `Run ${runId.slice(0, 8)}` : 'Run');\n\n  const queryResult = useQuery<RunRootQuery, RunRootQueryVariables>(RUN_ROOT_QUERY, {\n    variables: {runId},\n  });\n  const {data, loading} = queryResult;\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data.pipelineRunOrError : null;\n  const snapshotID = run?.pipelineSnapshotId;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const repoAddress = repoMatch?.match\n    ? buildRepoAddress(repoMatch.match.repository.name, repoMatch.match.repositoryLocation.name)\n    : null;\n\n  const isJob = useMemo(\n    () => !!(run && repoMatch && isThisThingAJob(repoMatch.match, run.pipelineName)),\n    [run, repoMatch],\n  );\n\n  const automaterializeTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.AssetEvaluationID) || null,\n    [run],\n  );\n\n  const tickDetails = useMemo(() => {\n    if (repoAddress) {\n      const tags = run?.tags || [];\n      const tickTag = tags.find((tag) => tag.key === DagsterTag.TickId);\n\n      if (tickTag) {\n        const scheduleOrSensor = tags.find(\n          (tag) => tag.key === DagsterTag.ScheduleName || tag.key === DagsterTag.SensorName,\n        );\n        if (scheduleOrSensor) {\n          const instigationSelector: InstigationSelector = {\n            name: scheduleOrSensor.value,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          };\n          return {\n            tickId: tickTag.value,\n            instigationType: scheduleOrSensor.key as\n              | DagsterTag.ScheduleName\n              | DagsterTag.SensorName,\n            instigationSelector,\n          };\n        }\n      }\n    }\n\n    return null;\n  }, [run, repoAddress]);\n\n  const partitionTag = run?.tags.find((tag) => tag.key === DagsterTag.Partition);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        flex={{direction: 'row', alignItems: 'flex-start'}}\n        style={{\n          position: 'relative',\n          zIndex: 1,\n        }}\n      >\n        <PageHeader\n          title={<RunHeaderTitle run={run} runId={runId} />}\n          tags={\n            run ? (\n              <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n                <RunStatusTag status={run.status} />\n                {!isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <Tag icon=\"run\">\n                    Run of{' '}\n                    <PipelineReference\n                      pipelineName={run?.pipelineName}\n                      pipelineHrefContext={repoAddress || 'repo-unknown'}\n                      snapshotId={snapshotID}\n                      size=\"small\"\n                      isJob={isJob}\n                    />\n                  </Tag>\n                ) : null}\n                {tickDetails ? (\n                  <TickTagForRun\n                    instigationSelector={tickDetails.instigationSelector}\n                    instigationType={tickDetails.instigationType}\n                    tickId={tickDetails.tickId}\n                  />\n                ) : null}\n                {partitionTag && <RunTag tag={partitionTag} />}\n                <RunAssetTags run={run} />\n                <RunAssetCheckTags run={run} />\n                <RunTimingTags run={run} loading={loading} />\n                {automaterializeTag && run.assetSelection?.length ? (\n                  <AutomaterializeTagWithEvaluation\n                    assetKeys={run.assetSelection}\n                    evaluationId={automaterializeTag.value}\n                  />\n                ) : null}\n              </Box>\n            ) : null\n          }\n          right={run ? <RunHeaderActions run={run} isJob={isJob} /> : null}\n        />\n      </Box>\n      <RunById data={data} runId={runId} />\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunRoot;\n\nconst RunById = (props: {data: RunRootQuery | undefined; runId: string}) => {\n  const {data, runId} = props;\n\n  if (!data || !data.pipelineRunOrError) {\n    return <Run run={undefined} runId={runId} />;\n  }\n\n  if (data.pipelineRunOrError.__typename !== 'Run') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No run found\"\n          description=\"The run with this ID does not exist or has been cleaned up.\"\n        />\n      </Box>\n    );\n  }\n\n  return <Run run={data.pipelineRunOrError} runId={runId} />;\n};\n\nconst RUN_ROOT_QUERY = gql`\n  query RunRootQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunPageFragment\n      }\n    }\n  }\n\n  ${RUN_PAGE_FRAGMENT}\n`;\n\nconst RunHeaderTitle = ({run, runId}: {run: RunPageFragment | null; runId: string}) => {\n  const {flagLegacyRunsPage} = useFeatureFlags();\n\n  const backfillTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.Backfill),\n    [run],\n  );\n\n  if (!flagLegacyRunsPage && backfillTag) {\n    return (\n      <Heading>\n        <Link to=\"/runs\" style={{color: Colors.textLight()}}>\n          Runs\n        </Link>\n        {' / '}\n        <Link\n          to={getBackfillPath(backfillTag.value, !!run?.assetSelection?.length)}\n          style={{color: Colors.textLight()}}\n        >\n          {backfillTag.value}\n        </Link>\n        {' / '}\n        {runId.slice(0, 8)}\n      </Heading>\n    );\n  }\n\n  return (\n    <Heading style={{display: 'flex', flexDirection: 'row', gap: 6}}>\n      <Link to=\"/runs\">Runs</Link>\n      <span>/</span>\n      <span style={{fontFamily: FontFamily.monospace}}>{runId.slice(0, 8)}</span>\n    </Heading>\n  );\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\n\nimport {INSTIGATION_EVENT_LOG_FRAGMENT, InstigationEventLogTable} from './InstigationEventLogTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {TickLogEventsQuery, TickLogEventsQueryVariables} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tickId,\n  timestamp,\n  instigationSelector,\n  isOpen,\n  onClose,\n}: {\n  tickId: string | null;\n  timestamp?: number;\n  instigationSelector: InstigationSelector;\n  isOpen: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', maxWidth: '1200px', minWidth: '800px'}}\n      title={\n        <span>\n          {timestamp ? (\n            <span>\n              <span>Logs for {instigationSelector.name}: </span>\n              <TimestampDisplay timestamp={timestamp} timeFormat={{showSeconds: true}} />\n            </span>\n          ) : (\n            <span>Logs for {instigationSelector.name}</span>\n          )}\n        </span>\n      }\n    >\n      {tickId ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tickId={tickId} />\n      ) : null}\n      {/* Use z-index to force the footer to sit above the lines of the logs table */}\n      <Box background={Colors.backgroundDefault()} style={{zIndex: 3, position: 'relative'}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Done</Button>\n        </DialogFooter>\n      </Box>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tickId: string;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tickId}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (loading) {\n    return (\n      <Box style={{height: 500}} flex={{justifyContent: 'center', alignItems: 'center'}}>\n        <SpinnerWithText label=\"Loading logs…\" />\n      </Box>\n    );\n  }\n\n  if (events && events.length) {\n    return (\n      <Box style={{height: 500}} flex={{direction: 'column'}}>\n        <InstigationEventLogTable events={events} />\n      </Box>\n    );\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n        ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n        : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      <NonIdealState\n        icon=\"no-results\"\n        title=\"No logs to display\"\n        description={\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>\n              Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n              visit the documentation for more information.\n            </div>\n            {tickStatus === 'FAILURE' && (\n              <>\n                <div>\n                  For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                  Cloud agent versions 1.5.14 or higher.\n                </div>\n                <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n              </>\n            )}\n          </Box>\n        }\n        action={\n          instigationLoggingDocsUrl && (\n            <ExternalAnchorButton\n              href={instigationLoggingDocsUrl}\n              rightIcon={<Icon name=\"open_in_new\" />}\n            >\n              View documentation\n            </ExternalAnchorButton>\n          )\n        }\n      />\n    </Box>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n"],"names":["useFavicon","useEffect","el","document","querySelector","previousHref","getAttribute","setAttribute","href","runStatusFavicon","status","RunStatus","FAILURE","SUCCESS","STARTING","STARTED","CANCELING","Run","memo","run","runId","props","logsFilter","setLogsFilter","useQueryPersistedLogFilter","selectionQuery","setSelectionQuery","useQueryPersistedState","queryKey","defaults","selection","useDocumentTitle","isHiddenAssetGroupJob","pipelineName","slice","concat","onShowStateDetails","stepKey","logs","errorNode","find","node","__typename","showCustomAlert","body","jsx_runtime","jsx","PythonErrorInfo","error","onSetSelectionQuery","query","logQuery","token","value","logsDependency","useTraceDependency","RunContext","Provider","LogsProvider","jsxs","Fragment","OnLogsLoaded","dependency","RunMetadataProvider","RunWithData","metadata","onSetLogsFilter","param","useLayoutEffect","loading","completeDependency","CompletionType","logTypeFromQuery","queryLogType","LogType","stdout","stderr","structured","newRunSelectionSyntax","featureEnabled","FeatureFlag","flagSelectionSyntax","setQueryLogType","logType","computeLogUrl","setComputeLogUrl","useState","stepKeysJSON","JSON","stringify","Object","keys","steps","sort","stepKeys","useMemo","parse","runtimeGraph","executionPlan","toGraphQueryItems","selectionStepKeys","filterRunSelectionByQuery","all","map","n","name","logCaptureInfo","computeLogFileKey","setComputeLogFileKey","useComputeLogFileKeyForSelection","defaultToFirstStep","logsFilterStepKeys","filter","v","reduce","accum","push","expandedPanel","setExpandedPanel","containerRef","useRef","current","size","getSize","isTopExpanded","isBottomExpanded","resetPanels","changeSize","SplitPanelContainer","ref","axis","identifier","firstInitialPercent","firstMinSize","first","QueuedState","ErrorBoundary","region","GanttChart","options","mode","GanttChartMode","WATERFALL_TIMED","toolbarActions","Box","flex","direction","alignItems","gap","Tooltip","content","Button","icon","Icon","onClick","RunActionButtons","graph","onClickStep","evt","index","indexOf","newSelected","filterForExactStep","nextSelectionQuery","shiftKey","includes","k","splice","length","matchingLogKey","matchingComputeLogKeyFromStepKey","logCaptureSteps","join","onSetSelection","focusedTime","NonIdealState","title","GanttChartLoadingState","secondMinSize","second","LogsContainer","LogsToolbar","onSetLogType","lt","onSetFilter","onSetComputeLogKey","counts","isSectionExpanded","toggleExpanded","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","NoStepSelectionState","type","LogsScrollingTable","filterStepKeys","filterKey","styled","div","withConfig","grow","justifyContent","style","background","Colors","description","RunAssetCheckTags","skip","data","useQuery","RUN_ASSETS_CHECKS_QUERY","variables","id","pipelineRunOrError","assetChecks","assetCheckSelection","AssetCheckTagCollection","useTags","gql","RunAssetTags","queryResult","RUN_ASSETS_QUERY","fetchPolicy","assetKeys","assetKeysForRun","assets","a","key","AssetKeyTagCollection","RunHeaderActions","isJob","runConfigYaml","runMetricsEnabled","hasRunMetricsEnabled","visibleDialog","setVisibleDialog","rootServerURI","useContext","AppContext","refetch","RunsQueryRefetchContext","copy","useCopyToClipboard","history","useHistory","freeSlots","useMutation","FREE_CONCURRENCY_SLOTS_MUTATION","copyConfig","showSharedToaster","intent","message","freeConcurrencySlots","resp","jobLink","workspacePipelineLinkForRun","repositoryName","repositoryOrigin","repositoryLocationName","Group","spacing","disabledReason","useDisabledButtonTooltipFix","disabled","label","AnchorButton","to","Popover","position","Menu","targetTagName","MenuItem","text","window","open","QUEUED","tagName","RunMetricsDialog","hasConcurrencyKeySlots","doneStatuses","has","hasDeletePermission","RunConfigDialog","isOpen","onClose","tags","QueuedRunCriteriaDialog","DeletionDialog","onComplete","workspacePipelinePath","repoName","repoLocation","path","onTerminateInstead","selectedRuns","canTerminate","hasTerminatePermission","TerminationDialog","RunTimingTags","startTime","interactionKind","placement","padding","RunTimingDetails","Tag","TimestampDisplay","timestamp","timeFormat","showSeconds","showTimezone","updateTime","undefined","endTime","span","fontVariantNumeric","formatElapsedTimeWithoutMsec","Date","now","TickTagForRun","instigationSelector","instigationType","tickId","showDetails","setShowDetails","showLogs","setShowLogs","DagsterTag","ScheduleName","repoAddress","buildRepoAddress","actions","workspacePathFromAddress","TagActionsPopover","maxWidth","MiddleTruncate","TickDetailsDialog","tickResultType","TickLogDialog","COLLATOR","Intl","Collator","navigator","language","sensitivity","AutomaterializeTagWithEvaluation","openEvaluation","evaluationId","setOpenEvaluation","sortedKeys","b","compare","width","vertical","horizontal","border","fontWeight","maxHeight","overflowY","url","assetDetailsPathForKey","assetKey","view","evaluation","left","right","overflow","ButtonLink","assetKeyPath","whiteSpace","EvaluationDetailDialog","evaluationID","RunRoot","useTrackPageView","useParams","RUN_ROOT_QUERY","snapshotID","pipelineSnapshotId","repoMatch","useRepositoryForRunWithParentSnapshot","match","repository","repositoryLocation","isThisThingAJob","automaterializeTag","tag","AssetEvaluationID","tickDetails","tickTag","TickId","scheduleOrSensor","SensorName","location","partitionTag","Partition","display","flexDirection","minWidth","height","zIndex","PageHeader","RunHeaderTitle","wrap","RunStatusTag","PipelineReference","pipelineHrefContext","snapshotId","RunTag","assetSelection","RunById","runs_RunRoot","RUN_PAGE_FRAGMENT","flagLegacyRunsPage","useFeatureFlags","backfillTag","Backfill","Heading","Link","color","getBackfillPath","fontFamily","FontFamily","monospace","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Dialog","QueryfulTickLogsTable","DialogFooter","topBorder","TICK_LOG_EVENTS_QUERY","notifyOnNetworkStatusChange","events","instigationStateOrError","tick","logEvents","SpinnerWithText","InstigationEventLogTable","tickStatus","instigationLoggingDocsUrl","action","ExternalAnchorButton","rightIcon","INSTIGATION_EVENT_LOG_FRAGMENT"],"sourceRoot":""}