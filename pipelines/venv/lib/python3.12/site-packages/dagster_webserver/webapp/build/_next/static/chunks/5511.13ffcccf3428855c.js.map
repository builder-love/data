{"version":3,"file":"static/chunks/5511.13ffcccf3428855c.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationTick.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationUtils.tsx","webpack://_N_E/../ui-core/src/instigation/TickDetailsDialog.tsx","webpack://_N_E/../ui-core/src/instigation/TickMaterializationsTable.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const queryResult = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const {data} = queryResult;\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {\n  Body,\n  Box,\n  Colors,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tooltip,\n} from '@dagster-io/ui-components';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {LaunchedRunListQuery, LaunchedRunListQueryVariables} from './types/InstigationTick.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunTable} from '../runs/RunTable';\nimport {RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTableRunFragment';\n\nexport const RunList = ({runIds}: {runIds: string[]}) => {\n  const queryResult = useQuery<LaunchedRunListQuery, LaunchedRunListQueryVariables>(\n    LAUNCHED_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          runIds,\n        },\n      },\n    },\n  );\n  const {data, loading} = queryResult;\n\n  if (loading || !data) {\n    return (\n      <Box padding={32}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={32}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"An error occurred\"\n          description={data.pipelineRunsOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </Box>\n  );\n};\n\nexport const TargetedRunList = ({originRunIds}: {originRunIds?: string[]}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', color: Colors.textLighter()}}>\n        <Body>\n          Targeted Runs\n          <Tooltip content=\"Runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCHED_RUN_LIST_QUERY = gql`\n  query LaunchedRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors, Group, Mono} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {gql} from '../apollo-client';\nimport {InstigationStateFragment, RunStatusFragment} from './types/InstigationUtils.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nexport const InstigatedRunStatus = ({\n  instigationState,\n}: {\n  instigationState: InstigationStateFragment;\n}) => {\n  const [instigationRun] = instigationState.runs;\n  if (!instigationRun) {\n    return <span style={{color: Colors.textLight()}}>None</span>;\n  }\n  return <LastRunSummary run={instigationRun} name={instigationState.name} />;\n};\n\nexport const RunStatusLink = ({run}: {run: RunStatusFragment}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.id}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({id: run.id})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    hasStartPermission\n    hasStopPermission\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.textLight()};\n  }\n`;\n\nexport const DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT = gql`\n  fragment DynamicPartitionsRequestResultFragment on DynamicPartitionsRequestResult {\n    partitionsDefName\n    partitionKeys\n    skippedPartitionKeys\n    type\n  }\n`;\n\nexport const HISTORY_TICK_FRAGMENT = gql`\n  fragment HistoryTick on InstigationTick {\n    id\n    tickId\n    status\n    timestamp\n    endTimestamp\n    cursor\n    instigationType\n    skipReason\n    requestedAssetMaterializationCount\n    runIds\n    runs {\n      id\n      status\n      ...RunStatusFragment\n    }\n    originRunIds\n    error {\n      ...PythonErrorFragment\n    }\n    logKey\n    ...TickTagFragment\n    dynamicPartitionsRequestResults {\n      ...DynamicPartitionsRequestResultFragment\n    }\n  }\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT}\n`;\n","import 'chartjs-adapter-date-fns';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Dialog,\n  DialogFooter,\n  DialogHeader,\n  MiddleTruncate,\n  NonIdealState,\n  SpinnerWithText,\n  Subtitle2,\n  Table,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {RunList, TargetedRunList} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT} from './InstigationUtils';\nimport {TickMaterializationsTable} from './TickMaterializationsTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/TickDetailsDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickResultType} from '../ticks/TickStatusTag';\n\ninterface DialogProps extends InnerProps {\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nexport const TickDetailsDialog = ({\n  tickId,\n  tickResultType,\n  isOpen,\n  instigationSelector,\n  onClose,\n}: DialogProps) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '80vw', maxWidth: '1200px', minWidth: '600px'}}\n    >\n      <TickDetailsDialogImpl\n        tickId={tickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n      />\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Close</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface InnerProps {\n  tickId: string | undefined;\n  tickResultType: TickResultType;\n  instigationSelector: InstigationSelector;\n}\n\nconst TickDetailsDialogImpl = ({tickId, tickResultType, instigationSelector}: InnerProps) => {\n  const {data, loading} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(\n    JOB_SELECTED_TICK_QUERY,\n    {\n      variables: {instigationSelector, tickId: tickId || ''},\n      skip: !tickId,\n    },\n  );\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  const [addedPartitionRequests, deletedPartitionRequests] = useMemo(() => {\n    const added = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.ADD_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    const deleted = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.DELETE_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  if (loading) {\n    return (\n      <>\n        <DialogHeader label={`Tick for ${instigationSelector.name}`} />\n        <Box style={{padding: 64}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n          <SpinnerWithText label=\"Loading tick details…\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (!tick) {\n    return (\n      <>\n        <DialogHeader label={`Tick for ${instigationSelector.name}`} />\n        <Box style={{padding: 64}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"Tick details not found\"\n            description=\"Details for this tick could not be found.\"\n          />\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <DialogHeader\n        label={\n          <>\n            <span>Tick for {instigationSelector.name}: </span>\n            <TimestampDisplay\n              timestamp={tick.timestamp}\n              timeFormat={{showTimezone: false, showSeconds: true}}\n            />\n          </>\n        }\n      />\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <TickDetailSummary tick={tick} tickResultType={tickResultType} />\n      </Box>\n      {tickResultType === 'materializations' ? <TickMaterializationsTable tick={tick} /> : null}\n      {tickResultType === 'runs' ? (\n        <div style={{height: '500px', overflowY: 'auto'}}>\n          {tick.runIds.length ? (\n            <>\n              <Box padding={{vertical: 16, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Requested runs</Subtitle2>\n              </Box>\n              <RunList runIds={tick.runIds} />\n            </>\n          ) : tick.originRunIds.length ? (\n            <TargetedRunList originRunIds={tick.originRunIds} />\n          ) : null}\n          {addedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Added partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={addedPartitionRequests} />\n            </>\n          ) : null}\n          {deletedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Deleted partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={deletedPartitionRequests} />\n            </>\n          ) : null}\n          {tick.error ? (\n            <Box padding={24}>\n              <PythonErrorInfo error={tick.error} />\n            </Box>\n          ) : null}\n          {tick.skipReason ? (\n            <Box padding={24}>\n              <strong>Skip reason:</strong> {tick.skipReason}\n            </Box>\n          ) : null}\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport function TickDetailSummary({\n  tick,\n  tickResultType,\n}: {\n  tick: HistoryTickFragment | AssetDaemonTickFragment;\n  tickResultType: TickResultType;\n}) {\n  const intent = useMemo(() => {\n    switch (tick?.status) {\n      case InstigationTickStatus.FAILURE:\n        return 'danger';\n      case InstigationTickStatus.STARTED:\n        return 'primary';\n      case InstigationTickStatus.SUCCESS:\n        return 'success';\n    }\n    return undefined;\n  }, [tick]);\n\n  return (\n    <>\n      <div style={{display: 'grid', gridTemplateColumns: 'repeat(3, minmax(0, 1fr))', gap: 12}}>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Status</Subtitle2>\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Tag intent={intent}>\n              {tick.status === InstigationTickStatus.STARTED ? (\n                'Evaluating…'\n              ) : (\n                <>\n                  {(tickResultType === 'materializations' || !('runIds' in tick)\n                    ? tick.requestedAssetMaterializationCount\n                    : tick.runIds.length) ?? 0}{' '}\n                  requested\n                </>\n              )}\n            </Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  showCustomAlert({\n                    title: 'Tick error',\n                    body: <PythonErrorInfo error={tick.error!} />,\n                  });\n                }}\n              >\n                View error\n              </ButtonLink>\n            ) : null}\n          </Box>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Timestamp</Subtitle2>\n          <div>\n            {tick ? (\n              <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n            ) : (\n              '–'\n            )}\n          </div>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Duration</Subtitle2>\n          <div>\n            {tick?.endTimestamp\n              ? formatElapsedTimeWithoutMsec(tick.endTimestamp * 1000 - tick.timestamp * 1000)\n              : '\\u2013'}\n          </div>\n        </Box>\n      </div>\n    </>\n  );\n}\n\nfunction PartitionsTable({partitions}: {partitions: DynamicPartitionsRequestResult[]}) {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Partition definition</th>\n          <th>Partition</th>\n        </tr>\n      </thead>\n      <tbody>\n        {partitions.flatMap((partition) =>\n          partition.partitionKeys?.map((key) => (\n            <tr key={key}>\n              <td>\n                <MiddleTruncate text={partition.partitionsDefName} />\n              </td>\n              <td>\n                <MiddleTruncate text={key} />\n              </td>\n            </tr>\n          )),\n        )}\n      </tbody>\n    </Table>\n  );\n}\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        tick(tickId: $tickId) {\n          id\n          ...HistoryTick\n\n          requestedAssetKeys {\n            path\n          }\n          requestedAssetMaterializationCount\n          autoMaterializeAssetEvaluationId\n          requestedMaterializationsForAssets {\n            assetKey {\n              path\n            }\n            partitionKeys\n          }\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n","import {\n  Box,\n  ButtonLink,\n  Caption,\n  Colors,\n  HeaderCell,\n  Icon,\n  Inner,\n  Row,\n  RowCell,\n  Spinner,\n  Subtitle2,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  AssetGroupAndLocationQuery,\n  AssetGroupAndLocationQueryVariables,\n} from './types/TickMaterializationsTable.types';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetLink} from '../assets/AssetLink';\nimport {AssetKeysDialogEmptyState} from '../assets/AutoMaterializePolicyPage/AssetKeysDialog';\nimport {EvaluationDetailDialog} from '../assets/AutoMaterializePolicyPage/EvaluationDetailDialog';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {AssetKeyInput} from '../graphql/types';\nimport {Container, HeaderRow} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nconst TEMPLATE_COLUMNS = '30% 17% 53%';\n\nexport const TickMaterializationsTable = ({\n  tick,\n}: {\n  tick: Pick<\n    AssetDaemonTickFragment,\n    'requestedAssetKeys' | 'requestedMaterializationsForAssets' | 'autoMaterializeAssetEvaluationId'\n  > | null;\n}) => {\n  const [queryString, setQueryString] = useState('');\n\n  const filteredAssetKeys = useMemo(\n    () =>\n      tick\n        ? tick.requestedAssetKeys.filter((assetKey) =>\n            assetKey.path.join('/').includes(queryString),\n          )\n        : [],\n    [tick, queryString],\n  );\n\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const rowVirtualizer = useVirtualizer({\n    count: filteredAssetKeys.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 34,\n    overscan: 10,\n  });\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  const assetKeyToPartitionsMap = useMemo(() => {\n    const map: Record<string, string[]> = {};\n    tick?.requestedMaterializationsForAssets.forEach(({assetKey, partitionKeys}) => {\n      map[tokenForAssetKey(assetKey)] = partitionKeys;\n    });\n    return map;\n  }, [tick?.requestedMaterializationsForAssets]);\n\n  const content = () => {\n    if (queryString && !filteredAssetKeys.length) {\n      return (\n        <AssetKeysDialogEmptyState\n          title=\"No matching asset keys\"\n          description={\n            <>\n              No matching asset keys for <strong>{queryString}</strong>\n            </>\n          }\n        />\n      );\n    }\n    if (!tick?.requestedAssetKeys.length) {\n      return (\n        <Box padding={{vertical: 12, horizontal: 24}}>\n          <Caption color={Colors.textLight()}>None</Caption>\n        </Box>\n      );\n    }\n    return (\n      <Container ref={parentRef}>\n        <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n          <HeaderCell>Asset</HeaderCell>\n          <HeaderCell>Group</HeaderCell>\n          <HeaderCell>Result</HeaderCell>\n        </HeaderRow>\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const assetKey = filteredAssetKeys[index]!;\n            return (\n              <AssetDetailRow\n                key={key}\n                $height={size}\n                $start={start}\n                assetKey={assetKey}\n                partitionKeys={assetKeyToPartitionsMap[tokenForAssetKey(assetKey)]}\n                evaluationId={tick.autoMaterializeAssetEvaluationId!}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    );\n  };\n\n  return (\n    <Box style={{height: '500px'}} flex={{direction: 'column'}}>\n      <Box\n        padding={{vertical: 12, horizontal: 24}}\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        border=\"bottom\"\n      >\n        <Subtitle2>Requested materializations</Subtitle2>\n        <TextInput\n          icon=\"search\"\n          value={queryString}\n          onChange={(e) => setQueryString(e.target.value)}\n          placeholder=\"Filter by asset key…\"\n          style={{width: '252px'}}\n        />\n      </Box>\n      {content()}\n    </Box>\n  );\n};\n\nconst AssetDetailRow = ({\n  $start,\n  $height,\n  assetKey,\n  partitionKeys,\n  evaluationId,\n}: {\n  $start: number;\n  $height: number;\n  assetKey: AssetKeyInput;\n  partitionKeys?: string[];\n  evaluationId: string;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const numMaterializations = partitionKeys?.length || 1;\n  const queryResult = useQuery<AssetGroupAndLocationQuery, AssetGroupAndLocationQueryVariables>(\n    ASSET_GROUP_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        assetKey: {path: assetKey.path},\n      },\n    },\n  );\n  const {data} = queryResult;\n\n  const asset = data?.assetOrError.__typename === 'Asset' ? data.assetOrError : null;\n  const definition = asset?.definition;\n  const repoAddress = definition\n    ? buildRepoAddress(definition.repository.name, definition.repository.location.name)\n    : null;\n\n  return (\n    <Row $start={$start} $height={$height}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <AssetLink path={assetKey.path} icon=\"asset\" textStyle=\"middle-truncate\" />\n        </RowCell>\n        <RowCell>\n          {data ? (\n            definition && definition.groupName && repoAddress ? (\n              <Link\n                to={workspacePathFromAddress(repoAddress, `/asset-groups/${definition.groupName}`)}\n              >\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                  <Icon color={Colors.textLight()} name=\"asset_group\" />\n                  {definition.groupName}\n                </Box>\n              </Link>\n            ) : (\n              <Caption color={Colors.textLight()}>Asset not found</Caption>\n            )\n          ) : (\n            <Spinner purpose=\"body-text\" />\n          )}\n        </RowCell>\n        <RowCell>\n          {definition ? (\n            <>\n              <ButtonLink onClick={() => setIsOpen(true)}>\n                {numMaterializations} materialization{numMaterializations === 1 ? '' : 's'}{' '}\n                requested\n              </ButtonLink>\n              <EvaluationDetailDialog\n                isOpen={isOpen}\n                onClose={() => setIsOpen(false)}\n                evaluationID={evaluationId}\n                assetKeyPath={assetKey.path}\n              />\n            </>\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    justify-content: center;\n  }\n`;\n\nconst ASSET_GROUP_QUERY = gql`\n  query AssetGroupAndLocationQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        definition {\n          id\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {Box, CaptionMono, Colors, FontFamily, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.id}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.id}\n            runId={run.id}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <CaptionMono>{titleForRun(run)}</CaptionMono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n"],"names":["LastRunSummary","memo","name","run","showHover","showButton","showSummary","param","status","intent","useMemo","RunStatus","SUCCESS","CANCELED","CANCELING","FAILURE","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Box","flex","direction","justifyContent","alignItems","gap","tag","tagElement","jsx","Tag","RunStatusIndicator","size","RunTime","Popover","position","interactionKind","content","div","RunStatusOverlay","hoverOpenDelay","RunStateSummary","failedStatuses","has","inProgressStatuses","StepSummaryForRun","runId","id","undefined","AnchorButton","to","concat","props","data","useQuery","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Caption","color","Colors","Link","stepKey","gql","RunList","runIds","loading","LAUNCHED_RUN_LIST_QUERY","padding","Spinner","purpose","pipelineRunsOrError","NonIdealState","icon","title","description","message","bottom","RunTable","runs","results","TargetedRunList","originRunIds","Group","spacing","border","side","Body","Tooltip","Icon","margin","TICK_TAG_FRAGMENT","PYTHON_ERROR_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","RunStatusLink","target","rel","Mono","titleForRun","RUN_STATUS_FRAGMENT","INSTIGATION_STATE_FRAGMENT","RUN_TIME_FRAGMENT","StatusTable","styled","table","withConfig","DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT","HISTORY_TICK_FRAGMENT","TickDetailsDialog","tickId","tickResultType","isOpen","instigationSelector","onClose","Dialog","style","width","maxWidth","minWidth","TickDetailsDialogImpl","DialogFooter","topBorder","Button","onClick","JOB_SELECTED_TICK_QUERY","skip","tick","instigationStateOrError","addedPartitionRequests","deletedPartitionRequests","dynamicPartitionsRequestResults","request","type","DynamicPartitionsRequestType","ADD_PARTITIONS","partitionKeys","DELETE_PARTITIONS","Fragment","DialogHeader","label","SpinnerWithText","span","TimestampDisplay","timestamp","timeFormat","showTimezone","showSeconds","vertical","horizontal","TickDetailSummary","TickMaterializationsTable","height","overflowY","Subtitle2","PartitionsTable","partitions","error","PythonErrorInfo","skipReason","strong","InstigationTickStatus","STARTED","display","gridTemplateColumns","requestedAssetMaterializationCount","ButtonLink","showCustomAlert","body","Timestamp","unix","endTimestamp","formatElapsedTimeWithoutMsec","Table","thead","tr","th","tbody","flatMap","partition","map","td","MiddleTruncate","text","partitionsDefName","key","TEMPLATE_COLUMNS","queryString","setQueryString","useState","filteredAssetKeys","requestedAssetKeys","assetKey","path","join","includes","parentRef","useRef","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","assetKeyToPartitionsMap","requestedMaterializationsForAssets","forEach","tokenForAssetKey","TextInput","value","onChange","e","placeholder","AssetKeysDialogEmptyState","Container","ref","HeaderRow","templateColumns","sticky","HeaderCell","Inner","$totalHeight","index","start","AssetDetailRow","$height","$start","evaluationId","autoMaterializeAssetEvaluationId","setIsOpen","numMaterializations","ASSET_GROUP_QUERY","fetchPolicy","asset","assetOrError","definition","repoAddress","buildRepoAddress","repository","location","Row","RowGrid","RowCell","AssetLink","textStyle","groupName","workspacePathFromAddress","EvaluationDetailDialog","evaluationID","assetKeyPath","RunStatusPez","opacity","RUN_STATUS_COLORS","Pez","$color","$opacity","RunStatusPezList","fade","jobName","max","ii","MAX_OPACITY","OverlayContainer","OverlayTitle","RunRow","CaptionMono","SummaryContainer","FontFamily","default"],"sourceRoot":""}