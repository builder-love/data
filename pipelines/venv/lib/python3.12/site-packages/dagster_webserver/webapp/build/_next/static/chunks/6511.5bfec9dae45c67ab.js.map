{"version":3,"file":"static/chunks/6511.5bfec9dae45c67ab.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/lodash/memoize.js","webpack://_N_E/../../node_modules/@vx/shape/esm/shapes/link/diagonal/LinkVertical.js","webpack://_N_E/../ui-core/src/app/Util.tsx","webpack://_N_E/../ui-core/src/asset-graph/Utils.tsx","webpack://_N_E/../ui-core/src/asset-graph/layout.ts","webpack://_N_E/../ui-core/src/app/titleOfIO.ts","webpack://_N_E/../ui-core/src/graph/layout.ts","webpack://_N_E/../ui-core/src/workers/dagre_layout.worker.ts"],"sourcesContent":["var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { linkVertical } from 'd3-shape';\nexport function pathVerticalDiagonal(_ref) {\n  var source = _ref.source,\n      target = _ref.target,\n      x = _ref.x,\n      y = _ref.y;\n  return function (data) {\n    var link = linkVertical();\n    link.x(x);\n    link.y(y);\n    link.source(source);\n    link.target(target);\n    return link(data);\n  };\n}\nLinkVertical.propTypes = {\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  x: PropTypes.func,\n  y: PropTypes.func,\n  source: PropTypes.func,\n  target: PropTypes.func,\n  path: PropTypes.func,\n  className: PropTypes.string,\n  children: PropTypes.func,\n  data: PropTypes.any\n};\nexport default function LinkVertical(_ref2) {\n  var className = _ref2.className,\n      innerRef = _ref2.innerRef,\n      data = _ref2.data,\n      path = _ref2.path,\n      _ref2$x = _ref2.x,\n      x = _ref2$x === void 0 ? function (d) {\n    return d.x;\n  } : _ref2$x,\n      _ref2$y = _ref2.y,\n      y = _ref2$y === void 0 ? function (d) {\n    return d.y;\n  } : _ref2$y,\n      _ref2$source = _ref2.source,\n      source = _ref2$source === void 0 ? function (d) {\n    return d.source;\n  } : _ref2$source,\n      _ref2$target = _ref2.target,\n      target = _ref2$target === void 0 ? function (d) {\n    return d.target;\n  } : _ref2$target,\n      children = _ref2.children,\n      restProps = _objectWithoutPropertiesLoose(_ref2, [\"className\", \"innerRef\", \"data\", \"path\", \"x\", \"y\", \"source\", \"target\", \"children\"]);\n\n  var pathGen = path || pathVerticalDiagonal({\n    source: source,\n    target: target,\n    x: x,\n    y: y\n  });\n  if (children) return children({\n    path: path\n  });\n  return React.createElement(\"path\", _extends({\n    ref: innerRef,\n    className: cx('vx-link vx-link-vertical-diagonal', className),\n    d: pathGen(data)\n  }, restProps));\n}","import {cache} from 'idb-lru-cache';\nimport memoize from 'lodash/memoize';\nimport LRU from 'lru-cache';\n\nimport {timeByParts} from './timeByParts';\n\nfunction twoDigit(v: number) {\n  return `${v < 10 ? '0' : ''}${v}`;\n}\n\nfunction indexesOf(string: string, search: RegExp | string) {\n  const indexes: number[] = [];\n  const regexp = new RegExp(search, 'g');\n  let match = null;\n  while ((match = regexp.exec(string))) {\n    indexes.push(match.index);\n  }\n  return indexes;\n}\n\nexport const withMiddleTruncation = (text: string, options: {maxLength: number}) => {\n  const overflowLength = text.length - options.maxLength;\n  if (overflowLength <= 0) {\n    // No truncation is necessary\n    return text;\n  }\n  if (options.maxLength <= 10) {\n    // Middle truncation to this few characters (eg: abc…ef) is kind of silly\n    // and just using abcde… looks better.\n    return text.substring(0, options.maxLength - 1) + '…';\n  }\n\n  // Find all the breakpoints in the string\n  //   \"my_great_long_solid_name\"\n  //     ˄     ˄    ˄     ˄\n  const breakpoints = text.includes('__') ? indexesOf(text, /__/g) : indexesOf(text, /[_>\\.-]/g);\n\n  // Given no breakpoints, slice out the middle of the string. Adding\n  // the overflowLength here gives us the END point of the truncated region.\n  //\n  //   \"abc(defg)hijk\"\n  //            ˄\n  let breakpoint = Math.floor((text.length + overflowLength) / 2);\n\n  // Find the first breakpoint that exists AFTER enough characters that we could show\n  // at least three prefix letters after cutting out overflowLength.\n  const firstUsableIdx = breakpoints.findIndex((bp) => bp > overflowLength + 3);\n\n  if (firstUsableIdx !== -1) {\n    // If we found a usable breakpoint, see if we could instead choose the middle\n    // breakpoint which would give us more prefix. All else equal,\n    // \"my_great_l…_name\" looks better than \"my_g…_solid_name\"\n    const middleIdx = Math.floor(breakpoints.length / 2);\n    const breakpointAtIndex = breakpoints[Math.max(firstUsableIdx, middleIdx)];\n    if (breakpointAtIndex !== undefined) {\n      breakpoint = breakpointAtIndex;\n    }\n  }\n\n  const result = [\n    text.substring(0, breakpoint - (overflowLength + 1)),\n    text.substring(breakpoint),\n  ].join('…');\n\n  return result;\n};\n\nconst msecFormatter = memoize((locale: string) => {\n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3,\n  });\n});\n\n/**\n * Return an i18n-formatted millisecond in seconds as a decimal, with no leading zero.\n */\nconst formatMsecMantissa = (msec: number) =>\n  msecFormatter(navigator.language)\n    .format(msec / 1000)\n    .slice(-4);\n\n/**\n * Format the time without milliseconds, rounding to :01 for non-zero value within (-1, 1)\n */\nexport const formatElapsedTimeWithoutMsec = (msec: number) => {\n  const {hours, minutes, seconds} = timeByParts(msec);\n  const negative = msec < 0;\n  const roundedSeconds = msec !== 0 && msec < 1000 && msec > -1000 ? 1 : seconds;\n  return `${negative ? '-' : ''}${hours}:${twoDigit(minutes)}:${twoDigit(roundedSeconds)}`;\n};\n\nexport const formatElapsedTimeWithMsec = (msec: number) => {\n  const {hours, minutes, seconds, milliseconds} = timeByParts(msec);\n\n  const negative = msec < 0;\n  const sign = negative ? '-' : '';\n  const hourStr = hours > 0 ? `${hours}:` : '';\n  const minuteStr = hours > 0 ? `${twoDigit(minutes)}:` : minutes > 0 ? `${minutes}:` : '';\n  const secStr = hours > 0 || minutes > 0 ? `${twoDigit(seconds)}` : `${seconds}`;\n  const mantissa = formatMsecMantissa(milliseconds);\n\n  return `${sign}${hourStr}${minuteStr}${secStr}${mantissa}`;\n};\n\nexport function breakOnUnderscores(str: string) {\n  return str.replace(/_/g, '_\\u200b');\n}\n\nexport function patchCopyToRemoveZeroWidthUnderscores() {\n  document.addEventListener('copy', (event) => {\n    if (!event.clipboardData) {\n      // afaik this is always defined, but the TS field is optional\n      return;\n    }\n\n    // Note: This returns the text of the current selection if DOM\n    // nodes are selected. If the selection on the page is text within\n    // codemirror or an input or textarea, this returns \"\" and we fall\n    // through to the default pasteboard content.\n    const text = (window.getSelection() || '').toString().replace(/_\\u200b/g, '_');\n\n    if (text.length) {\n      event.preventDefault();\n      event.clipboardData.setData('Text', text);\n    }\n  });\n}\n\nexport function asyncMemoize<T, R, U extends (arg: T, ...rest: any[]) => PromiseLike<R>>(\n  fn: U,\n  hashFn?: (arg: T, ...rest: any[]) => any,\n  hashSize?: number,\n): U {\n  const cache = new LRU<any, R>(hashSize || 50);\n  return (async (arg: T, ...rest: any[]) => {\n    const key = hashFn ? hashFn(arg, ...rest) : arg;\n    if (cache.has(key)) {\n      return Promise.resolve(cache.get(key) as R);\n    }\n    const r = (await fn(arg, ...rest)) as R;\n    cache.set(key, r);\n    return r;\n  }) as any;\n}\n\nexport function indexedDBAsyncMemoize<T, R, U extends (arg: T, ...rest: any[]) => Promise<R>>(\n  fn: U,\n  hashFn?: (arg: T, ...rest: any[]) => any,\n): U & {\n  isCached: (arg: T, ...rest: any[]) => Promise<boolean>;\n} {\n  let lru: ReturnType<typeof cache<string, R>> | undefined;\n  try {\n    lru = cache<string, R>({\n      dbName: 'indexDBAsyncMemoizeDB',\n      maxCount: 50,\n    });\n  } catch {}\n\n  const hashToPromise: Record<string, Promise<R>> = {};\n\n  async function genHashKey(arg: T, ...rest: any[]) {\n    const hash = hashFn ? hashFn(arg, ...rest) : arg;\n\n    const encoder = new TextEncoder();\n    // Crypto.subtle isn't defined in insecure contexts... fallback to using the full string as a key\n    // https://stackoverflow.com/questions/46468104/how-to-use-subtlecrypto-in-chrome-window-crypto-subtle-is-undefined\n    if (crypto.subtle?.digest) {\n      const data = encoder.encode(hash.toString());\n      const hashBuffer = await crypto.subtle.digest('SHA-1', data);\n      const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n      return hashArray.map((b) => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string\n    }\n    return hash.toString();\n  }\n\n  const ret = (async (arg: T, ...rest: any[]) => {\n    return new Promise<R>(async (resolve) => {\n      const hashKey = await genHashKey(arg, ...rest);\n      if (lru && (await lru.has(hashKey))) {\n        const {value} = await lru.get(hashKey);\n        resolve(value);\n        return;\n      } else if (!hashToPromise[hashKey]) {\n        hashToPromise[hashKey] = new Promise(async (res) => {\n          const result = await fn(arg, ...rest);\n          // Resolve the promise before storing the result in IndexedDB\n          res(result);\n          if (lru) {\n            await lru.set(hashKey, result, {\n              // Some day in the year 2050...\n              expiry: new Date(9 ** 13),\n            });\n            delete hashToPromise[hashKey];\n          }\n        });\n      }\n      resolve(await hashToPromise[hashKey]!);\n    });\n  }) as any;\n  ret.isCached = async (arg: T, ...rest: any) => {\n    const hashKey = await genHashKey(arg, ...rest);\n    if (!lru) {\n      return false;\n    }\n    return await lru.has(hashKey);\n  };\n  return ret;\n}\n\n// Simple memoization function for methods that take a single object argument.\n// Returns a memoized copy of the provided function which retrieves the result\n// from a cache after the first invocation with a given object.\n//\n// Uses WeakMap to tie the lifecycle of the cache to the lifecycle of the\n// object argument.\nexport function weakmapMemoize<T extends object, R>(\n  fn: (arg: T, ...rest: any[]) => R,\n): (arg: T, ...rest: any[]) => R {\n  const cache = new WeakMap();\n  return (arg: T, ...rest: any[]) => {\n    if (cache.has(arg)) {\n      return cache.get(arg);\n    }\n    const r = fn(arg, ...rest);\n    cache.set(arg, r);\n    return r;\n  };\n}\n\nexport function assertUnreachable(value: never): never {\n  throw new Error(`Didn't expect to get here with value: ${JSON.stringify(value)}`);\n}\n\nexport function colorHash(str: string) {\n  let seed = 0;\n  for (let i = 0; i < str.length; i++) {\n    seed = ((seed << 5) - seed + str.charCodeAt(i)) | 0;\n  }\n\n  const random255 = (x: number) => {\n    const value = Math.sin(x) * 10000;\n    return 255 * (value - Math.floor(value));\n  };\n\n  return `rgb(${random255(seed++)}, ${random255(seed++)}, ${random255(seed++)})`;\n}\n\n// Useful for generating predicates to retain type information when\n// find/filtering GraphQL results. Example:\n//\n// const textMetadata = metadataEntries.filter(gqlTypePredicate('TextMetadataEntry'));\n//\n// `textMetadata` will be of type `TextMetadataEntry[]`.\nexport const gqlTypePredicate =\n  <T extends string>(typename: T) =>\n  <N extends {__typename: string}>(node: N): node is Extract<N, {__typename: T}> => {\n    return node.__typename === typename;\n  };\n\nexport const COMMON_COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n","import {pathHorizontalDiagonal, pathVerticalDiagonal} from '@vx/shape';\nimport memoize from 'lodash/memoize';\n\nimport {AssetNodeKeyFragment} from './types/AssetNode.types';\nimport {AssetNodeForGraphQueryFragment} from './types/useAssetGraphData.types';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {\n  AssetCheckLiveFragment,\n  AssetGraphLiveQuery,\n  AssetLatestInfoFragment,\n  AssetLatestInfoRunFragment,\n  AssetNodeLiveFragment,\n  AssetNodeLiveFreshnessInfoFragment,\n  AssetNodeLiveMaterializationFragment,\n  AssetNodeLiveObservationFragment,\n} from '../asset-data/types/AssetBaseDataProvider.types';\nimport {AssetStaleDataFragment} from '../asset-data/types/AssetStaleStatusDataProvider.types';\nimport {RunStatus} from '../graphql/types';\n\nexport enum AssetGraphViewType {\n  GLOBAL = 'global',\n  JOB = 'job',\n  GROUP = 'group',\n}\n\n/**\n * IMPORTANT: This file is used by the WebWorker so make sure we don't indirectly import React or anything that relies on window/document\n */\n\n/**\n * IMPORTANT: This file is used by the WebWorker so make sure we don't indirectly import React or anything that relies on window/document\n */\n\ntype AssetNode = AssetNodeForGraphQueryFragment;\ntype AssetKey = AssetNodeKeyFragment;\ntype AssetLiveNode = AssetNodeLiveFragment;\ntype AssetLatestInfo = AssetLatestInfoFragment;\n\nexport const __ASSET_JOB_PREFIX = '__ASSET_JOB';\nexport const __ANONYMOUS_ASSET_JOB_PREFIX = '__anonymous_asset_job';\n\nexport function isHiddenAssetGroupJob(jobName: string) {\n  return jobName.startsWith(__ASSET_JOB_PREFIX) || jobName.startsWith(__ANONYMOUS_ASSET_JOB_PREFIX);\n}\n\n// IMPORTANT: We use this, rather than AssetNode.id throughout this file because\n// the GraphQL interface exposes dependencyKeys, not dependencyIds. We also need\n// ways to \"build\" GraphId's locally, they can't always be server-provided.\n//\n// This value is NOT the same as AssetNode.id values provided by the server,\n// because JSON.stringify's whitespace behavior is different than Python's.\n//\nexport type GraphId = string;\nexport const toGraphId = (key: {path: string[]}): GraphId => JSON.stringify(key.path);\nexport const fromGraphId = (graphId: GraphId): AssetNodeKeyFragment => ({\n  path: JSON.parse(graphId),\n  __typename: 'AssetKey',\n});\n\nexport interface GraphNode {\n  id: GraphId;\n  assetKey: AssetKey;\n  definition: AssetNode;\n}\n\nexport interface GraphData {\n  nodes: {[assetId: GraphId]: GraphNode};\n  downstream: {[assetId: GraphId]: {[childAssetId: GraphId]: boolean}};\n  upstream: {[assetId: GraphId]: {[parentAssetId: GraphId]: boolean}};\n  expandedGroups?: string[];\n}\n\nexport const buildGraphData = (assetNodes: AssetNode[]) => {\n  const data: GraphData = {\n    nodes: {},\n    downstream: {},\n    upstream: {},\n  };\n\n  const addEdge = (upstreamGraphId: string, downstreamGraphId: string) => {\n    if (upstreamGraphId === downstreamGraphId) {\n      // Skip add edges for self-dependencies (eg: assets relying on older partitions of themselves)\n      return;\n    }\n    data.downstream[upstreamGraphId] = {\n      ...(data.downstream[upstreamGraphId] || {}),\n      [downstreamGraphId]: true,\n    };\n    data.upstream[downstreamGraphId] = {\n      ...(data.upstream[downstreamGraphId] || {}),\n      [upstreamGraphId]: true,\n    };\n  };\n\n  assetNodes.forEach((definition: AssetNode) => {\n    const id = toGraphId(definition.assetKey);\n    definition.dependencyKeys.forEach((key) => {\n      addEdge(toGraphId(key), id);\n    });\n    definition.dependedByKeys.forEach((key) => {\n      addEdge(id, toGraphId(key));\n    });\n\n    data.nodes[id] = {\n      id,\n      assetKey: definition.assetKey,\n      definition,\n    };\n  });\n\n  return data;\n};\n\nexport const nodeDependsOnSelf = (node: GraphNode) => {\n  const id = toGraphId(node.assetKey);\n  return node.definition.dependedByKeys.some((d) => toGraphId(d) === id);\n};\n\nexport const graphHasCycles = (graphData: GraphData) => {\n  const nodes = new Set(Object.keys(graphData.nodes));\n  const search = (stack: string[], node: string): boolean => {\n    if (stack.indexOf(node) !== -1) {\n      return true;\n    }\n    if (nodes.delete(node) === true) {\n      const nextStack = stack.concat(node);\n      return Object.keys(graphData.downstream[node] || {}).some((nextNode) =>\n        search(nextStack, nextNode),\n      );\n    }\n    return false;\n  };\n  let hasCycles = false;\n  while (nodes.size !== 0 && !hasCycles) {\n    hasCycles = search([], nodes.values().next().value!);\n  }\n  return hasCycles;\n};\n\nexport const buildSVGPathHorizontal = pathHorizontalDiagonal({\n  source: (s: any) => s.source,\n  target: (s: any) => s.target,\n  x: (s: any) => s.x,\n  y: (s: any) => s.y,\n});\nexport const buildSVGPathVertical = pathVerticalDiagonal({\n  source: (s: any) => s.source,\n  target: (s: any) => s.target,\n  x: (s: any) => s.x,\n  y: (s: any) => s.y,\n});\n\nexport interface LiveDataForNode {\n  stepKey: string;\n  unstartedRunIds: string[]; // run in progress and step not started\n  inProgressRunIds: string[]; // run in progress and step in progress\n  runWhichFailedToMaterialize: AssetLatestInfoRunFragment | null;\n  lastMaterialization: AssetNodeLiveMaterializationFragment | null;\n  lastMaterializationRunStatus: RunStatus | null; // only available if runWhichFailedToMaterialize is null\n  freshnessInfo: AssetNodeLiveFreshnessInfoFragment | null;\n  lastObservation: AssetNodeLiveObservationFragment | null;\n  assetChecks: AssetCheckLiveFragment[];\n  partitionStats: {\n    numMaterialized: number;\n    numMaterializing: number;\n    numPartitions: number;\n    numFailed: number;\n  } | null;\n  opNames: string[];\n}\n\nexport type LiveDataForNodeWithStaleData = LiveDataForNode & {\n  staleStatus: AssetStaleDataFragment['staleStatus'];\n  staleCauses: AssetStaleDataFragment['staleCauses'];\n};\n\nexport const MISSING_LIVE_DATA: LiveDataForNodeWithStaleData = {\n  unstartedRunIds: [],\n  inProgressRunIds: [],\n  runWhichFailedToMaterialize: null,\n  freshnessInfo: null,\n  lastMaterialization: null,\n  lastMaterializationRunStatus: null,\n  lastObservation: null,\n  partitionStats: null,\n  staleStatus: null,\n  staleCauses: [],\n  assetChecks: [],\n  opNames: [],\n  stepKey: '',\n};\n\nexport interface LiveData {\n  [assetId: GraphId]: LiveDataForNode;\n}\n\nexport const buildLiveData = ({\n  assetNodes,\n  assetsLatestInfo,\n}: Pick<AssetGraphLiveQuery, 'assetNodes' | 'assetsLatestInfo'>) => {\n  const data: LiveData = {};\n\n  for (const liveNode of assetNodes) {\n    const graphId = toGraphId(liveNode.assetKey);\n    const assetLatestInfo = assetsLatestInfo.find(\n      (r) => JSON.stringify(r.assetKey) === JSON.stringify(liveNode.assetKey),\n    );\n\n    data[graphId] = buildLiveDataForNode(liveNode, assetLatestInfo);\n  }\n\n  return data;\n};\n\nexport const buildLiveDataForNode = (\n  assetNode: AssetLiveNode,\n  assetLatestInfo?: AssetLatestInfo,\n): LiveDataForNode => {\n  const lastMaterialization = assetNode.assetMaterializations[0] || null;\n  const lastObservation = assetNode.assetObservations[0] || null;\n  const latestRun = assetLatestInfo?.latestRun ? assetLatestInfo.latestRun : null;\n\n  return {\n    lastMaterialization,\n    lastMaterializationRunStatus:\n      latestRun && lastMaterialization?.runId === latestRun.id ? latestRun.status : null,\n    lastObservation,\n    assetChecks:\n      assetNode.assetChecksOrError.__typename === 'AssetChecks'\n        ? assetNode.assetChecksOrError.checks\n        : [],\n    stepKey: stepKeyForAsset(assetNode),\n    freshnessInfo: assetNode.freshnessInfo,\n    inProgressRunIds: assetLatestInfo?.inProgressRunIds || [],\n    unstartedRunIds: assetLatestInfo?.unstartedRunIds || [],\n    partitionStats: assetNode.partitionStats || null,\n    runWhichFailedToMaterialize:\n      latestRun && shouldDisplayRunFailure(latestRun, lastMaterialization) ? latestRun : null,\n    opNames: assetNode.opNames,\n  };\n};\n\nexport function shouldDisplayRunFailure(\n  latestRun: AssetLatestInfoRunFragment,\n  lastMaterialization: AssetNodeLiveMaterializationFragment | null,\n) {\n  if (latestRun.status !== 'FAILURE') {\n    return false; // The run did not fail\n  }\n  if (lastMaterialization) {\n    if (lastMaterialization && lastMaterialization.runId === latestRun.id) {\n      // The run failed, but it successfully emitted the latest materialization event. This\n      // is caused by the run failing in a later step.\n      return false;\n    }\n    if (Number(lastMaterialization.timestamp) > Number(latestRun.endTime) * 1000) {\n      // The latest materialization is NEWER than the latest run. This is caused by the user\n      // reporting a materialization manually.\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function tokenForAssetKey(key: {path: string[]}) {\n  return key.path.join('/');\n}\n\nexport function tokenToAssetKey(token: string) {\n  return {path: token.split('/')};\n}\n\nexport function displayNameForAssetKey(key: {path: string[]}) {\n  return key.path.join(' / ');\n}\n\nexport function sortAssetKeys(a: {path: string[]}, b: {path: string[]}) {\n  return COMMON_COLLATOR.compare(displayNameForAssetKey(a), displayNameForAssetKey(b));\n}\n\nexport function stepKeyForAsset(definition: {opNames: string[]}) {\n  // Used for linking to the run with this step highlighted. We only support highlighting\n  // a single step, so just use the first one.\n  const firstOp = definition.opNames.length ? definition.opNames[0] : null;\n  return firstOp || '';\n}\n\nexport const itemWithAssetKey = (key: {path: string[]}) => {\n  const token = tokenForAssetKey(key);\n  return (asset: {assetKey: {path: string[]}}) => tokenForAssetKey(asset.assetKey) === token;\n};\n\nexport const isGroupId = (str: string) => /^[^@:]+@[^@:]+:.+$/.test(str);\n\nexport const groupIdForNode = (node: GraphNode) =>\n  [\n    node.definition.repository.name,\n    '@',\n    node.definition.repository.location.name,\n    ':',\n    node.definition.groupName,\n  ].join('');\n\n// Inclusive\nexport const getUpstreamNodes = memoize(\n  (assetKey: AssetNodeKeyFragment, graphData: GraphData): AssetNodeKeyFragment[] => {\n    const upstream = Object.keys(graphData.upstream[toGraphId(assetKey)] || {});\n    const currentUpstream = upstream.map((graphId) => fromGraphId(graphId));\n    return [\n      assetKey,\n      ...currentUpstream,\n      ...currentUpstream.map((graphId) => getUpstreamNodes(graphId, graphData)).flat(),\n    ].filter(\n      (key, index, arr) =>\n        // Filter out non uniques\n        arr.findIndex((key2) => JSON.stringify(key2) === JSON.stringify(key)) === index,\n    );\n  },\n  (key, data) => JSON.stringify({key, data}),\n);\n","import * as dagre from 'dagre';\n\nimport {GraphData, GraphId, GraphNode, groupIdForNode, isGroupId} from './Utils';\nimport {IBounds, IPoint} from '../graph/common';\nimport {ChangeReason} from '../graphql/types';\n\nexport type AssetLayoutDirection = 'vertical' | 'horizontal';\n\nexport interface AssetLayout {\n  id: GraphId;\n  bounds: IBounds; // Overall frame of the box relative to 0,0 on the graph\n}\n\nexport interface GroupLayout {\n  id: GraphId;\n  groupName: string;\n  repositoryName: string;\n  repositoryLocationName: string;\n  bounds: IBounds; // Overall frame of the box relative to 0,0 on the graph\n  expanded: boolean;\n}\nexport type AssetLayoutEdge = {\n  from: IPoint;\n  fromId: string;\n  to: IPoint;\n  toId: string;\n};\n\nexport type AssetGraphLayout = {\n  width: number;\n  height: number;\n  edges: AssetLayoutEdge[];\n  nodes: {[id: string]: AssetLayout};\n  groups: {[name: string]: GroupLayout};\n};\nconst MARGIN = 100;\n\nexport type LayoutAssetGraphConfig = dagre.GraphLabel & {\n  direction: AssetLayoutDirection;\n  /** Pass `auto` to use getAssetNodeDimensions, or a value to give nodes a fixed height */\n  nodeHeight: number | 'auto';\n  /** Our asset groups have \"title bars\" - use these numbers to adjust the bounding boxes.\n   * Note that these adjustments are applied post-dagre layout. For padding > nodesep, you\n   * may need to set \"clusterpaddingtop\", \"clusterpaddingbottom\" so Dagre lays out the boxes\n   * with more spacing.\n   */\n  groupPaddingTop: number;\n  groupPaddingBottom: number;\n  groupRendering: 'if-varied' | 'always';\n\n  /** Supported in Dagre, just not documented. Additional spacing between group nodes */\n  clusterpaddingtop?: number;\n  clusterpaddingbottom?: number;\n  ranker?: 'tight-tree' | 'longest-path' | 'network-simplex';\n};\n\nexport type LayoutAssetGraphOptions = {\n  direction: AssetLayoutDirection;\n  overrides?: Partial<LayoutAssetGraphConfig>;\n};\n\nexport const Config = {\n  horizontal: {\n    ranker: 'tight-tree',\n    direction: 'horizontal',\n    marginx: MARGIN,\n    marginy: MARGIN,\n    ranksep: 60,\n    rankdir: 'LR',\n    edgesep: 90,\n    nodesep: -10,\n    nodeHeight: 'auto',\n    groupPaddingTop: 65,\n    groupPaddingBottom: -4,\n    groupRendering: 'if-varied',\n    clusterpaddingtop: 100,\n  },\n  vertical: {\n    ranker: 'tight-tree',\n    direction: 'horizontal',\n    marginx: MARGIN,\n    marginy: MARGIN,\n    ranksep: 20,\n    rankdir: 'TB',\n    nodesep: 40,\n    edgesep: 10,\n    nodeHeight: 'auto',\n    groupPaddingTop: 55,\n    groupPaddingBottom: -4,\n    groupRendering: 'if-varied',\n  },\n};\n\nexport const layoutAssetGraph = (\n  graphData: GraphData,\n  opts: LayoutAssetGraphOptions,\n): AssetGraphLayout => {\n  try {\n    return layoutAssetGraphImpl(graphData, opts);\n  } catch {\n    try {\n      return layoutAssetGraphImpl(graphData, {\n        ...opts,\n        overrides: {\n          ranker: 'longest-path',\n        },\n      });\n    } catch {\n      return layoutAssetGraphImpl(graphData, {...opts, overrides: {ranker: 'network-simplex'}});\n    }\n  }\n};\n\nexport const layoutAssetGraphImpl = (\n  graphData: GraphData,\n  opts: LayoutAssetGraphOptions,\n): AssetGraphLayout => {\n  const g = new dagre.graphlib.Graph({compound: true});\n  const config = Object.assign({}, Config[opts.direction], opts.overrides || {});\n\n  g.setGraph(config);\n  g.setDefaultEdgeLabel(() => ({}));\n\n  // const shouldRender = (node?: GraphNode) => node && node.definition.opNames.length > 0;\n  const shouldRender = (node?: GraphNode) => node;\n  const renderedNodes = Object.values(graphData.nodes).filter(shouldRender);\n  const expandedGroups = graphData.expandedGroups || [];\n  const expandedGroupsSet = new Set(expandedGroups);\n\n  // Identify all the groups\n  const groups: {[id: string]: GroupLayout} = {};\n  for (const node of renderedNodes) {\n    if (node.definition.groupName) {\n      const id = groupIdForNode(node);\n      groups[id] = groups[id] || {\n        id,\n        expanded: expandedGroupsSet.has(id),\n        groupName: node.definition.groupName,\n        repositoryName: node.definition.repository.name,\n        repositoryLocationName: node.definition.repository.location.name,\n        bounds: {x: 0, y: 0, width: 0, height: 0},\n      };\n    }\n  }\n\n  // Add all the group boxes to the graph\n  const groupsPresent =\n    config.groupRendering === 'if-varied' ? Object.keys(groups).length > 1 : true;\n\n  if (groupsPresent) {\n    Object.keys(groups).forEach((groupId) => {\n      if (expandedGroupsSet.has(groupId)) {\n        // sized based on it's children, but \"border\" tells Dagre we want cluster-level\n        // spacing between the node and others. Necessary because our groups have title bars.\n        g.setNode(groupId, {borderType: 'borderRight'});\n      } else {\n        g.setNode(groupId, {width: ASSET_NODE_WIDTH, height: 110});\n      }\n    });\n  }\n\n  // Add all the nodes inside expanded groups to the graph\n  renderedNodes.forEach((node) => {\n    if (!groupsPresent || expandedGroupsSet.has(groupIdForNode(node))) {\n      const label =\n        config.nodeHeight === 'auto'\n          ? getAssetNodeDimensions(node.definition)\n          : {width: ASSET_NODE_WIDTH, height: config.nodeHeight};\n\n      g.setNode(node.id, label);\n      if (groupsPresent && node.definition.groupName) {\n        g.setParent(node.id, groupIdForNode(node));\n      }\n    }\n  });\n\n  const linksToAssetsOutsideGraphedSet: {[id: string]: true} = {};\n  const groupIdForAssetId = Object.fromEntries(\n    Object.entries(graphData.nodes).map(([id, node]) => [id, groupIdForNode(node)]),\n  );\n\n  // Add the edges to the graph, and accumulate a set of \"foreign nodes\" (for which\n  // we have an inbound/outbound edge, but we don't have the `node` in the graphData).\n  Object.entries(graphData.downstream).forEach(([upstreamId, graphDataDownstream]) => {\n    const downstreamIds = Object.keys(graphDataDownstream);\n    downstreamIds.forEach((downstreamId) => {\n      if (\n        !shouldRender(graphData.nodes[downstreamId]) &&\n        !shouldRender(graphData.nodes[upstreamId])\n      ) {\n        return;\n      }\n      let v = upstreamId;\n      let w = downstreamId;\n\n      const wGroup = groupIdForAssetId[downstreamId];\n      if (groupsPresent && wGroup && !expandedGroupsSet.has(wGroup)) {\n        w = wGroup;\n      }\n      const vGroup = groupIdForAssetId[upstreamId];\n      if (groupsPresent && vGroup && !expandedGroupsSet.has(vGroup)) {\n        v = vGroup;\n      }\n      if (v === w) {\n        return;\n      }\n\n      g.setEdge({v, w}, {weight: 1});\n\n      if (!shouldRender(graphData.nodes[downstreamId])) {\n        linksToAssetsOutsideGraphedSet[downstreamId] = true;\n      } else if (!shouldRender(graphData.nodes[upstreamId])) {\n        linksToAssetsOutsideGraphedSet[upstreamId] = true;\n      }\n    });\n  });\n\n  // Add all the link nodes to the graph\n  Object.keys(linksToAssetsOutsideGraphedSet).forEach((id) => {\n    const path = JSON.parse(id);\n    const label = path[path.length - 1] || '';\n    g.setNode(id, getAssetLinkDimensions(label, opts));\n  });\n\n  dagre.layout(g);\n\n  let maxWidth = 1;\n  let maxHeight = 1;\n\n  const nodes: {[id: string]: AssetLayout} = {};\n\n  g.nodes().forEach((id) => {\n    const dagreNode = g.node(id);\n    if (!dagreNode?.x || !dagreNode?.width) {\n      return;\n    }\n    const bounds = {\n      x: dagreNode.x - dagreNode.width / 2,\n      y: dagreNode.y - dagreNode.height / 2,\n      width: dagreNode.width,\n      height: dagreNode.height,\n    };\n    if (!isGroupId(id)) {\n      nodes[id] = {id, bounds};\n    } else if (!expandedGroupsSet.has(id)) {\n      const group = groups[id]!;\n      group.bounds = bounds;\n    }\n\n    maxWidth = Math.max(maxWidth, dagreNode.x + dagreNode.width / 2);\n    maxHeight = Math.max(maxHeight, dagreNode.y + dagreNode.height / 2);\n  });\n\n  // Apply bounds to the groups based on the nodes inside them\n  if (groupsPresent) {\n    for (const node of renderedNodes) {\n      const nodeLayout = nodes[node.id];\n      if (nodeLayout && node.definition.groupName) {\n        const groupId = groupIdForNode(node);\n        const group = groups[groupId]!;\n        group.bounds =\n          group.bounds.width === 0\n            ? nodeLayout.bounds\n            : extendBounds(group.bounds, nodeLayout.bounds);\n      }\n    }\n    for (const group of Object.values(groups)) {\n      if (group.expanded) {\n        group.bounds = padBounds(group.bounds, {\n          x: 15,\n          top: config.groupPaddingTop,\n          bottom: config.groupPaddingBottom,\n        });\n      }\n    }\n  }\n\n  const edges: AssetLayoutEdge[] = [];\n\n  g.edges().forEach((e) => {\n    const v = g.node(e.v);\n    const w = g.node(e.w);\n    if (!v || !w) {\n      return;\n    }\n    const vXInset = !!linksToAssetsOutsideGraphedSet[e.v] ? 16 : 24;\n    const wXInset = !!linksToAssetsOutsideGraphedSet[e.w] ? 16 : 24;\n\n    // Ignore the coordinates from dagre and use the top left + bottom left of the\n    edges.push(\n      opts.direction === 'horizontal'\n        ? {\n            from: {x: v.x + v.width / 2, y: v.y},\n            fromId: e.v,\n            to: {x: w.x - w.width / 2 - 5, y: w.y},\n            toId: e.w,\n          }\n        : {\n            from: {x: v.x - v.width / 2 + vXInset, y: v.y - 30 + v.height / 2},\n            fromId: e.v,\n            to: {x: w.x - w.width / 2 + wXInset, y: w.y + 20 - w.height / 2},\n            toId: e.w,\n          },\n    );\n  });\n\n  return {\n    nodes,\n    edges,\n    width: maxWidth + MARGIN,\n    height: maxHeight + MARGIN,\n    groups: groupsPresent ? groups : {},\n  };\n};\n\nexport const ASSET_LINK_NAME_MAX_LENGTH = 30;\n\nexport const getAssetLinkDimensions = (label: string, opts: LayoutAssetGraphOptions) => {\n  return opts.direction === 'horizontal'\n    ? {width: 32 + 7.1 * Math.min(ASSET_LINK_NAME_MAX_LENGTH, label.length), height: 50}\n    : {width: 106, height: 50};\n};\n\nexport const padBounds = (a: IBounds, padding: {x: number; top: number; bottom: number}) => {\n  return {\n    x: a.x - padding.x,\n    y: a.y - padding.top,\n    width: a.width + padding.x * 2,\n    height: a.height + padding.top + padding.bottom,\n  };\n};\n\nexport const extendBounds = (a: IBounds, b: IBounds) => {\n  const xmin = Math.min(a.x, b.x);\n  const ymin = Math.min(a.y, b.y);\n  const xmax = Math.max(a.x + a.width, b.x + b.width);\n  const ymax = Math.max(a.y + a.height, b.y + b.height);\n  return {x: xmin, y: ymin, width: xmax - xmin, height: ymax - ymin};\n};\n\nexport const ASSET_NODE_WIDTH = 320;\nexport const ASSET_NODE_TAGS_HEIGHT = 28;\nexport const ASSET_NODE_STATUS_ROW_HEIGHT = 25;\n\nexport const ASSET_NODE_NAME_MAX_LENGTH = 31;\n\nexport const getAssetNodeDimensions = (def: {\n  assetKey: {path: string[]};\n  opNames: string[];\n  isMaterializable: boolean;\n  isObservable: boolean;\n  isPartitioned: boolean;\n  graphName: string | null;\n  description?: string | null;\n  computeKind: string | null;\n  changedReasons?: ChangeReason[];\n}) => {\n  let height = 0;\n\n  height += ASSET_NODE_TAGS_HEIGHT; // top tags\n\n  height += 76; // box padding + border + name + description\n\n  if (def.isPartitioned && def.isMaterializable) {\n    height += ASSET_NODE_STATUS_ROW_HEIGHT;\n  }\n\n  height += ASSET_NODE_STATUS_ROW_HEIGHT; // status row\n  height += ASSET_NODE_STATUS_ROW_HEIGHT; // checks row\n  height += ASSET_NODE_TAGS_HEIGHT; // bottom tags\n\n  return {width: ASSET_NODE_WIDTH, height};\n};\n","export const DEFAULT_RESULT_NAME = 'result';\n\nexport const titleOfIO = (i: {solid: {name: string}; definition: {name: string}}) => {\n  return i.solid.name !== DEFAULT_RESULT_NAME\n    ? `${i.solid.name}:${i.definition.name}`\n    : i.solid.name;\n};\n","import * as dagre from 'dagre';\n\nimport {IBounds, IPoint} from './common';\nimport {titleOfIO} from '../app/titleOfIO';\n\nexport type OpLayoutEdgeSide = {\n  point: IPoint;\n  opName: string;\n  edgeName: string;\n};\n\nexport type OpLayoutEdge = {\n  from: OpLayoutEdgeSide;\n  to: OpLayoutEdgeSide;\n};\n\nexport interface OpLayout {\n  // Overall frame of the box relative to 0,0 on the graph\n  bounds: IBounds;\n\n  // Frames of specific components - These need to be computed during layout\n  // (rather than at render time) to position edges into inputs/outputs.\n  op: IBounds;\n  inputs: {[inputName: string]: OpLayoutIO};\n  outputs: {[outputName: string]: OpLayoutIO};\n}\n\nexport interface OpLayoutIO {\n  layout: IBounds;\n  label: boolean;\n  collapsed: string[];\n  port: IPoint;\n}\n\nexport type OpGraphLayout = {\n  width: number;\n  height: number;\n  parent: ParentOpLayout | null;\n  edges: OpLayoutEdge[];\n  nodes: {[opName: string]: OpLayout};\n};\n\ninterface ParentOpLayout extends Omit<OpLayout, 'op'> {\n  mappingLeftEdge: number;\n  mappingLeftSpacing: number;\n  dependsOn: {[opName: string]: IPoint};\n  dependedBy: {[opName: string]: IPoint};\n  invocationBoundingBox: IBounds;\n}\n\nexport interface ILayoutOp {\n  name: string;\n  inputs: {\n    definition: {\n      name: string;\n    };\n    dependsOn: {\n      definition: {\n        name: string;\n      };\n      solid: {\n        name: string;\n      };\n    }[];\n  }[];\n  definition: {\n    description: string | null;\n    assetNodes: {\n      assetKey: {\n        path: string[];\n      };\n    }[];\n  };\n  outputs: {\n    definition: {\n      name: string;\n    };\n    dependedBy: {\n      definition: {\n        name: string;\n      };\n      solid: {\n        name: string;\n      };\n    }[];\n  }[];\n}\n\nconst OP_WIDTH = 370;\nconst OP_BASE_HEIGHT = 52;\nconst OP_ASSETS_ROW_HEIGHT = 22;\nconst IO_HEIGHT = 26;\nconst IO_INSET = 0;\nconst IO_MINI_WIDTH = 35;\nconst IO_THRESHOLD_FOR_MINI = 4;\nconst PORT_INSET_X = 13;\nconst PORT_INSET_Y = IO_HEIGHT / 2;\nconst PARENT_DEFINITION_PADDING = 70;\nconst PARENT_INVOCATION_PADDING = 70;\nconst EXTERNAL_DEPENDENCY_PADDING = 50;\n\nconst MARGIN_BASE = 100;\n\ntype OpLinkInfo = {\n  solid: {name: string};\n  definition: {name: string};\n};\n\nfunction flattenIO(arrays: OpLinkInfo[][]) {\n  const map: {[key: string]: OpLinkInfo} = {};\n  arrays.forEach((array) => array.forEach((item) => (map[titleOfIO(item)] = item)));\n  return Object.values(map);\n}\n\nexport type LayoutOpGraphOptions = {\n  parentOp?: ILayoutOp;\n};\n\nexport function layoutOpGraph(pipelineOps: ILayoutOp[], opts: LayoutOpGraphOptions): OpGraphLayout {\n  const g = new dagre.graphlib.Graph();\n\n  // First, identify how much space we need to pad the DAG by in order to show the\n  // parent op AROUND it. We pass this padding in to dagre, and then we have enough\n  // room to add our parent layout around the result.\n  let parentIOPadding = 0;\n  let marginy = MARGIN_BASE;\n  let marginx = MARGIN_BASE;\n  if (opts.parentOp) {\n    parentIOPadding =\n      Math.max(opts.parentOp.inputs.length, opts.parentOp.outputs.length) * IO_HEIGHT;\n    marginx = PARENT_DEFINITION_PADDING + PARENT_INVOCATION_PADDING;\n    marginy = marginx + parentIOPadding;\n  }\n\n  // Define a new top-down, left to right graph layout\n  g.setGraph({rankdir: 'TB', marginx, marginy, ranker: 'tight-tree'});\n  g.setDefaultEdgeLabel(() => ({}));\n\n  const edges: OpLayoutEdge[] = [];\n  const opNamesPresent: {[name: string]: boolean} = {};\n\n  pipelineOps.forEach((op) => {\n    opNamesPresent[op.name] = true;\n  });\n  pipelineOps.forEach((op) => {\n    // Lay out each op individually to get it's width and height based on it's\n    // inputs and outputs, and then attach it to the graph. Dagre will give us it's\n    // x,y position.\n    const layout = layoutOp(op, {x: 0, y: 0});\n    g.setNode(op.name, {\n      width: layout.bounds.width,\n      height: layout.bounds.height,\n    });\n\n    // Give Dagre the dependency edges and build a flat set of them so we\n    // can reference them in a single pass later\n    op.inputs.forEach((input) => {\n      input.dependsOn.forEach((dep) => {\n        if (opNamesPresent[dep.solid.name] && opNamesPresent[op.name]) {\n          g.setEdge({v: dep.solid.name, w: op.name}, {weight: 1});\n\n          edges.push({\n            from: {\n              point: {x: 0, y: 0},\n              opName: dep.solid.name,\n              edgeName: dep.definition.name,\n            },\n            to: {\n              point: {x: 0, y: 0},\n              opName: op.name,\n              edgeName: input.definition.name,\n            },\n          });\n        }\n      });\n    });\n  });\n\n  dagre.layout(g);\n\n  const ops: {[opName: string]: OpLayout} = {};\n  const dagreNodes: {[opName: string]: dagre.Node} = {};\n  g.nodes().forEach(function (opName) {\n    const node = g.node(opName);\n    if (!node) {\n      return;\n    }\n    dagreNodes[opName] = node;\n  });\n\n  // Due to a bug in Dagre when run without an \"align\" value, we need to calculate\n  // the total width of the graph coordinate space ourselves. We need the height\n  // because we've shifted long single rows into multiple rows.\n  let maxWidth = 0;\n  let maxHeight = 0;\n\n  // Read the Dagre layout and map \"nodes\" back to our solids, but with\n  // X,Y coordinates this time.\n  Object.entries(dagreNodes).forEach(([opName, node]) => {\n    const op = pipelineOps.find(({name}) => name === opName);\n    if (!op) {\n      return;\n    }\n\n    const x = node.x - node.width / 2; // Dagre's x/y is the center, we want top left\n    const y = node.y - node.height / 2;\n    ops[opName] = layoutOp(op, {x, y});\n    maxWidth = Math.max(maxWidth, x + node.width);\n    maxHeight = Math.max(maxHeight, y + node.height);\n  });\n\n  // Read the Dagre layout and map \"edges\" back to our data model. We don't\n  // currently use the \"closest points on the node\" Dagre suggests (but we could).\n  g.edges().forEach(function (e) {\n    const conn = edges.find((c) => c.from.opName === e.v && c.to.opName === e.w);\n    const points = g.edge(e).points;\n    if (conn && points.length > 0) {\n      conn.from.point = points[0]!;\n      conn.to.point = points[points.length - 1]!;\n    }\n  });\n\n  const result: OpGraphLayout = {\n    edges,\n    nodes: ops,\n    width: maxWidth + marginx,\n    height: maxHeight + marginy,\n    parent: null,\n  };\n\n  if (opts.parentOp) {\n    // Now that we've computed the pipeline layout fully, lay out the\n    // composite op around the completed DAG.\n    result.parent = layoutParentGraphOp(result, opts.parentOp, parentIOPadding);\n  }\n\n  return result;\n}\n\nfunction layoutParentGraphOp(layout: OpGraphLayout, op: ILayoutOp, parentIOPadding: number) {\n  const result: ParentOpLayout = {\n    invocationBoundingBox: {\n      x: 1,\n      y: 1,\n      width: layout.width - 1,\n      height: layout.height - 1,\n    },\n    bounds: {\n      x: PARENT_INVOCATION_PADDING,\n      y: PARENT_INVOCATION_PADDING + parentIOPadding,\n      width: layout.width - PARENT_INVOCATION_PADDING * 2,\n      height: layout.height - (PARENT_INVOCATION_PADDING + parentIOPadding) * 2,\n    },\n    mappingLeftEdge: PARENT_INVOCATION_PADDING - 20,\n    mappingLeftSpacing: 10,\n    inputs: {},\n    outputs: {},\n    dependsOn: layoutExternalConnections(\n      flattenIO(op.inputs.map((d) => d.dependsOn)),\n      -EXTERNAL_DEPENDENCY_PADDING,\n      layout.width,\n    ),\n    dependedBy: layoutExternalConnections(\n      flattenIO(op.outputs.map((d) => d.dependedBy)),\n      layout.height + EXTERNAL_DEPENDENCY_PADDING,\n      layout.width,\n    ),\n  };\n\n  const boundingBottom = result.bounds.y + result.bounds.height;\n\n  op.inputs.forEach((input, idx) => {\n    result.inputs[input.definition.name] = {\n      layout: {\n        x: result.bounds.x,\n        y: result.bounds.y - idx * IO_HEIGHT - IO_HEIGHT,\n        width: 0,\n        height: IO_HEIGHT,\n      },\n      collapsed: [],\n      label: true,\n      port: {\n        x: result.bounds.x + PORT_INSET_X,\n        y: result.bounds.y - idx * IO_HEIGHT - IO_HEIGHT / 2,\n      },\n    };\n  });\n\n  op.outputs.forEach((output, idx) => {\n    result.outputs[output.definition.name] = {\n      layout: {\n        x: result.bounds.x,\n        y: boundingBottom + idx * IO_HEIGHT,\n        width: 0,\n        height: IO_HEIGHT,\n      },\n      collapsed: [],\n      label: true,\n      port: {\n        x: result.bounds.x + PORT_INSET_X,\n        y: boundingBottom + idx * IO_HEIGHT + IO_HEIGHT / 2,\n      },\n    };\n  });\n\n  return result;\n}\n\nfunction layoutExternalConnections(links: OpLinkInfo[], y: number, layoutWidth: number) {\n  // fill evenly from 0 to layoutWidth from left to right, then center them if there's overflow.\n  const inset = PARENT_INVOCATION_PADDING + PORT_INSET_X;\n  const insetWidth = layoutWidth - inset * 2;\n  const spacing = Math.max(200, insetWidth / links.length);\n  const baseX = inset + Math.min(0, (insetWidth - links.length * spacing) / 2);\n  const yShift = spacing < 300 ? 20 : 0;\n\n  const result: {[opName: string]: IPoint} = {};\n  links.forEach((link, idx) => {\n    const shiftDirection = 1 - (idx % 2) * 2; // 1 or -1, alternating\n    result[titleOfIO(link)] = {\n      x: baseX + idx * spacing,\n      y: y + yShift * shiftDirection,\n    };\n  });\n  return result;\n}\n\nexport function layoutOp(op: ILayoutOp, root: IPoint): OpLayout {\n  // Starting at the root (top left) X,Y, return the layout information for an op with\n  // input blocks, then the main block, then output blocks (arranged vertically).\n  //\n  // This code \"appends\" boxes vertically, advancing accY as it goes.\n  let accY = root.y;\n\n  const appendMiniIODots = <T extends ILayoutOp['inputs'][0] | ILayoutOp['outputs'][0]>(\n    ios: T[],\n    sortKey: (io: T) => string,\n    clusteringKey: (io: T) => string,\n  ) => {\n    // Sort both input and output boxes displayed on the graph alphabetically based on the input name.\n    // This means that if two ops are connected to each other multiple times, the lines do not cross.\n    const sorted = [...ios].sort((a, b) => sortKey(a).localeCompare(sortKey(b)));\n\n    let x = 0;\n    let last: OpLayoutIO;\n    let lastKey: string | null = null;\n    const layouts: {[name: string]: OpLayoutIO} = {};\n    const spacing = Math.min(IO_MINI_WIDTH, OP_WIDTH / (sorted.length + 1));\n\n    // Add \"port\" layouts, collapsing the dots if they are connected to the same opposing solid\n    // (eg: two inputs connected to the same upstream output) with a \"[O] + 2\" style.\n    sorted.forEach((io, _idx) => {\n      const key = clusteringKey(io);\n      if (key !== lastKey) {\n        lastKey = key;\n        last = {\n          port: {\n            x: root.x + x + PORT_INSET_X,\n            y: accY + PORT_INSET_Y,\n          },\n          collapsed: [],\n          label: false,\n          layout: {\n            x: root.x + x,\n            y: accY,\n            width: IO_MINI_WIDTH,\n            height: IO_HEIGHT,\n          },\n        };\n        layouts[io.definition.name] = last;\n        x += spacing;\n      } else {\n        if (last.collapsed.length === 0) {\n          x += 15;\n        }\n        last.collapsed.push(io.definition.name);\n      }\n    });\n\n    // Center the items on the op rather than left justifying them\n    const centeringAdjustment = (OP_WIDTH - (x - PORT_INSET_X + IO_MINI_WIDTH)) / 2;\n    Object.values(layouts).forEach((l) => {\n      l.layout.x += centeringAdjustment;\n      l.port.x += centeringAdjustment;\n    });\n\n    // Place the next box beneath the\n    accY += IO_HEIGHT;\n\n    return layouts;\n  };\n\n  const appendStackedIOBoxes = (ios: ILayoutOp['inputs'] | ILayoutOp['outputs']) => {\n    const layouts: {[name: string]: OpLayoutIO} = {};\n    ios.forEach((io) => {\n      layouts[io.definition.name] = {\n        port: {x: root.x + PORT_INSET_X, y: accY + PORT_INSET_Y},\n        label: true,\n        collapsed: [],\n        layout: {\n          x: root.x,\n          y: accY,\n          width: 0,\n          height: IO_HEIGHT,\n        },\n      };\n      accY += IO_HEIGHT;\n    });\n    return layouts;\n  };\n\n  const inputLayouts =\n    op.inputs.length > IO_THRESHOLD_FOR_MINI\n      ? appendMiniIODots(\n          op.inputs,\n          (input) => input.definition.name,\n          (input) => input.dependsOn[0]?.solid.name || '',\n        )\n      : appendStackedIOBoxes(op.inputs);\n\n  const opLayout: IBounds = {\n    x: root.x,\n    y: Math.max(root.y, accY - IO_INSET),\n    width: OP_WIDTH,\n    height: OP_BASE_HEIGHT + IO_INSET * 2,\n  };\n\n  accY += OP_BASE_HEIGHT;\n\n  if (op.definition.assetNodes.length && op.definition.description) {\n    opLayout.height += OP_ASSETS_ROW_HEIGHT;\n    accY += OP_ASSETS_ROW_HEIGHT;\n  }\n\n  const outputLayouts =\n    op.outputs.length > IO_THRESHOLD_FOR_MINI\n      ? appendMiniIODots(\n          op.outputs,\n          (o) => o.dependedBy[0]?.definition.name || '',\n          (o) => o.dependedBy[0]?.solid.name || '',\n        )\n      : appendStackedIOBoxes(op.outputs);\n\n  return {\n    bounds: {\n      x: root.x - 5,\n      y: root.y - 5,\n      width: OP_WIDTH + 10,\n      height: accY - root.y + 10,\n    },\n    op: opLayout,\n    inputs: inputLayouts,\n    outputs: outputLayouts,\n  };\n}\n","/* eslint-disable no-restricted-globals */\n\nimport {layoutAssetGraph} from '../asset-graph/layout';\nimport {layoutOpGraph} from '../graph/layout';\n\n/**\n * NOTE: Please avoid adding React as a transitive dependency to this file, as it can break\n * the development workflow. https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/24\n *\n * If you see an error like `$RefreshReg$ is not defined` during development, check the\n * dependencies of this file. If you find that React has been included as a dependency, please\n * try to remove it.\n */\n\nself.addEventListener('message', (event) => {\n  const {data} = event;\n\n  switch (data.type) {\n    case 'layoutOpGraph': {\n      const {ops, opts} = data;\n      self.postMessage(layoutOpGraph(ops, opts));\n      break;\n    }\n    case 'layoutAssetGraph': {\n      const {graphData, opts} = data;\n      self.postMessage(layoutAssetGraph(graphData, opts));\n    }\n  }\n});\n"],"names":["MapCache","__webpack_require__","memoize","func","resolver","memoized","args","arguments","key","apply","cache","has","get","result","set","Cache","module","exports","_ref","source","target","x","y","AssetGraphViewType","prop_types_default","oneOfType","object","string","any","Intl","NumberFormat","locale","minimumFractionDigits","maximumFractionDigits","Collator","navigator","language","sensitivity","toGraphId","JSON","stringify","path","fromGraphId","parse","graphId","__typename","pathHorizontalDiagonal","s","isGroupId","test","str","groupIdForNode","node","definition","repository","name","location","groupName","join","getUpstreamNodes","assetKey","graphData","currentUpstream","upstream","keys","map","flat","filter","index","arr","findIndex","key2","data","Config","horizontal","ranker","direction","marginx","marginy","ranksep","rankdir","edgesep","nodesep","nodeHeight","groupPaddingTop","groupPaddingBottom","groupRendering","clusterpaddingtop","vertical","layoutAssetGraph","opts","layoutAssetGraphImpl","overrides","g","dagre","Graph","compound","config","Object","assign","setGraph","setDefaultEdgeLabel","shouldRender","renderedNodes","values","nodes","expandedGroupsSet","Set","expandedGroups","groups","id","expanded","repositoryName","repositoryLocationName","bounds","width","height","groupsPresent","length","forEach","groupId","setNode","borderType","ASSET_NODE_WIDTH","label","getAssetNodeDimensions","setParent","linksToAssetsOutsideGraphedSet","groupIdForAssetId","fromEntries","entries","param","downstream","upstreamId","graphDataDownstream","downstreamIds","downstreamId","v","w","wGroup","vGroup","setEdge","weight","getAssetLinkDimensions","maxWidth","maxHeight","dagreNode","group","Math","max","nodeLayout","extendBounds","padBounds","top","bottom","edges","e","vXInset","wXInset","push","from","fromId","to","toId","min","a","padding","b","xmin","ymin","xmax","ymax","def","isPartitioned","isMaterializable","ASSET_NODE_STATUS_ROW_HEIGHT","titleOfIO","i","solid","concat","flattenIO","arrays","array","item","layoutExternalConnections","links","layoutWidth","insetWidth","inset","spacing","baseX","yShift","link","idx","layoutOp","op","root","accY","appendMiniIODots","ios","sortKey","clusteringKey","last","sorted","sort","localeCompare","lastKey","layouts","OP_WIDTH","io","_idx","port","IO_HEIGHT","collapsed","layout","centeringAdjustment","IO_MINI_WIDTH","l","appendStackedIOBoxes","inputLayouts","inputs","input","dependsOn","opLayout","OP_BASE_HEIGHT","assetNodes","description","outputLayouts","outputs","o","dependedBy","self","addEventListener","event","type","ops","postMessage","layoutOpGraph","pipelineOps","parentIOPadding","parentOp","PARENT_DEFINITION_PADDING","PARENT_INVOCATION_PADDING","opNamesPresent","dep","point","opName","edgeName","dagreNodes","find","conn","c","points","edge","parent","layoutParentGraphOp","invocationBoundingBox","mappingLeftEdge","mappingLeftSpacing","d","boundingBottom","output"],"sourceRoot":""}