# cloudbuild.yaml
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/cloud_sql_user/versions/latest
    env: 'DB_USER'
  - versionName: projects/$PROJECT_ID/secrets/cloud_sql_password/versions/latest
    env: 'DB_PASSWORD'
  - versionName: projects/$PROJECT_ID/secrets/gcp_project_id/versions/latest
    env: 'GCP_PROJECT_ID'
  - versionName: projects/$PROJECT_ID/secrets/go_blockchain_ecosystem/versions/latest
    env: 'GH_PAT'
  - versionName: projects/$PROJECT_ID/secrets/bitbucket_api_key/versions/latest
    env: 'BB_KEY'

steps:
- name: 'gcr.io/cloud-builders/docker'
  id: 'pull-proxy-image'
  args: ['pull', 'gcr.io/cloud-builders/cloud-sql-proxy']
  waitFor: ['-'] # Start this step immediately

# 2. Run the Cloud SQL Proxy in the 'cloudbuild' network
- name: 'gcr.io/cloud-builders/docker'
  id: 'proxy-service'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      docker run -d \
        --name=cloudsql-proxy \
        --network=cloudbuild \
        -p 127.0.0.1:5432:5432 \
        gcr.io/cloud-builders/cloud-sql-proxy:latest \ 
        data-pipelines-450611:us-central1:builder-love
      echo "Cloud SQL Proxy started. Waiting for it to be ready..."
      sleep 10 # Give the proxy a moment to fully initialize
      echo "Proxy status:"
      docker logs cloudsql-proxy
  waitFor: ['pull-proxy-image'] # Ensure the image is pulled before running

# 3. Create .env file inside the 'pipelines' directory.
- name: 'bash'
  id: 'Create .env File'
  secretEnv:
  - 'DB_USER'
  - 'DB_PASSWORD'
  - 'GCP_PROJECT_ID'
  - 'GH_PAT'
  - 'BB_KEY'
  env:
  - 'DAGSTER_ENV=stg'
  - 'DAGSTER_HOME=/opt/dagster/app'
  - 'DB_NAME=postgres'
  - 'DB_HOST=cloudsql-proxy' # This points to the proxy.
  script: |
    echo "DAGSTER_ENV=$DAGSTER_ENV" > pipelines/.env
    echo "DAGSTER_HOME=$DAGSTER_HOME" >> pipelines/.env
    echo "cloud_sql_postgres_db=$DB_NAME" >> pipelines/.env
    echo "cloud_sql_postgres_host=$DB_HOST" >> pipelines/.env
    echo "cloud_sql_user=$$DB_USER" >> pipelines/.env
    echo "cloud_sql_password=$$DB_PASSWORD" >> pipelines/.env
    echo "gcp_project_id=$$GCP_PROJECT_ID" >> pipelines/.env
    echo "go_blockchain_ecosystem=$$GH_PAT" >> pipelines/.env
    echo "bitbucket_api_key=$$BB_KEY" >> pipelines/.env

# 4. Build the Docker image, connecting to the proxy network.
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker build'
  waitFor: ['proxy-service', 'Create .env File']
  args: [
    'build',
    '--network=cloudbuild',
    '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA',
    '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:latest',
    './pipelines'
  ]

# 5. Push the built image to Artifact Registry.
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app', '--all-tags']

# 6. Deploy the new image to your GKE cluster.
- name: 'gcr.io/cloud-builders/gke-deploy'
  args:
  - 'run'
  - '--filename=pipelines/k8s/'
  - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app=us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA'
  - '--location=us-central1-c'
  - '--cluster=dagster-cluster'

images:
- 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA'
- 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:latest'

options:
  logging: CLOUD_LOGGING_ONLY