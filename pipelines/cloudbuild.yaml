# cloudbuild.yaml
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/cloud_sql_user/versions/latest
    env: 'DB_USER'
  - versionName: projects/$PROJECT_ID/secrets/cloud_sql_password/versions/latest
    env: 'DB_PASSWORD'
  - versionName: projects/$PROJECT_ID/secrets/gcp_project_id/versions/latest
    env: 'GCP_PROJECT_ID'
  - versionName: projects/$PROJECT_ID/secrets/go_blockchain_ecosystem/versions/latest
    env: 'GH_PAT'
  - versionName: projects/$PROJECT_ID/secrets/bitbucket_api_key/versions/latest
    env: 'BB_KEY'

steps:
# - name: 'gcr.io/cloud-builders/wget'
#   id: 'install-proxy'
#   entrypoint: sh
#   args:
#     - -c
#       - |
#         wget -P /workspace -O cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/2.18.0
#         chmod +x /workspace/cloud-sql-proxy

# 3. Create .env file inside the 'pipelines' directory.
- name: 'bash'
  id: 'Create .env File'
  secretEnv:
  - 'DB_USER'
  - 'DB_PASSWORD'
  - 'GCP_PROJECT_ID'
  - 'GH_PAT'
  - 'BB_KEY'
  env:
  - 'DAGSTER_ENV=stg'
  - 'DAGSTER_HOME=/opt/dagster/app'
  - 'DB_NAME=postgres'
  - 'DB_HOST=127.0.0.1' # This points to the proxy.
  script: |
    echo "DAGSTER_ENV=$DAGSTER_ENV" > pipelines/.env
    echo "DAGSTER_HOME=$DAGSTER_HOME" >> pipelines/.env
    echo "cloud_sql_postgres_db=$DB_NAME" >> pipelines/.env
    echo "cloud_sql_postgres_host=$DB_HOST" >> pipelines/.env
    echo "cloud_sql_user=$$DB_USER" >> pipelines/.env
    echo "cloud_sql_password=$$DB_PASSWORD" >> pipelines/.env
    echo "gcp_project_id=$$GCP_PROJECT_ID" >> pipelines/.env
    echo "go_blockchain_ecosystem=$$GH_PAT" >> pipelines/.env
    echo "bitbucket_api_key=$$BB_KEY" >> pipelines/.env

# 4. Build the Docker image, connecting to the proxy network.
- name: 'gcr.io/cloud-builders/docker' # Use the docker builder as it's the primary operation
  id: 'build-and-push-app'
  waitFor: ['Create .env File'] # Keep your existing waits if needed
  entrypoint: 'bash' # We'll run a multi-line bash script
  args:
    - '-c'
    - |
      # first install the proxy using curl
      curl -o cloud-sql-proxy "https://storage.googleapis.com/cloud-sql-proxy/v2/cloud-sql-proxy.linux.amd64"
      chmod +x cloud-sql-proxy

      # echo the proxy version
      echo "Cloud SQL Proxy version:"
      ./cloud-sql-proxy --version

      # Start the Cloud SQL Proxy in the background
      # Use your specific instance connection name and port
      ./cloud-sql-proxy -instances=data-pipelines-450611:us-central1:builder-love=tcp:5432
      
      # Give the proxy a moment to fully initialize
      sleep 5 
      echo "Cloud SQL Proxy started. Proceeding with Docker build."

      # --- Docker Build Operations ---
      docker build \
        --network=cloudbuild \
        -t us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA \
        -t us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:latest \
        ./pipelines
      
      # --- Docker Push Operations ---
      echo "Pushing Docker images..."
      docker push us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA
      docker push us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:latest

      echo "Docker build and push completed."

# 5. Push the built image to Artifact Registry.
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app', '--all-tags']

# 6. Deploy the new image to your GKE cluster.
- name: 'gcr.io/cloud-builders/gke-deploy'
  args:
  - 'run'
  - '--filename=pipelines/k8s/'
  - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app=us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA'
  - '--location=us-central1-c'
  - '--cluster=dagster-cluster'

images:
- 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA'
- 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:latest'

options:
  logging: CLOUD_LOGGING_ONLY