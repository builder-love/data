# 1. Define the sensitive values to pull from Secret Manager.
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/cloud_sql_user/versions/latest
    env: 'DB_USER'
  - versionName: projects/$PROJECT_ID/secrets/cloud_sql_password/versions/latest
    env: 'DB_PASSWORD'
  - versionName: projects/$PROJECT_ID/secrets/cloud_sql_instance_connection_name/versions/latest
    env: 'INSTANCE_CONNECTION_NAME'
  - versionName: projects/$PROJECT_ID/secrets/gcp_project_id/versions/latest
    env: 'GCP_PROJECT_ID'
  - versionName: projects/$PROJECT_ID/secrets/go_blockchain_ecosystem/versions/latest
    env: 'GH_PAT'
  - versionName: projects/$PROJECT_ID/secrets/bitbucket_api_key/versions/latest
    env: 'BB_KEY'

steps:
# 2. Build the .env file from both secrets and step-specific environment variables.
- name: 'bash'
  id: 'Create .env File'
  # Define non-sensitive configuration here.
  env:
  - 'DAGSTER_ENV=stg'
  - 'DAGSTER_HOME=/opt/dagster/app'
  - 'DB_NAME=postgres'
  - 'DB_HOST=host.docker.internal'
  script: |
    # Write the step-specific environment variables.
    echo "DAGSTER_ENV=$DAGSTER_ENV" > .env
    echo "DAGSTER_HOME=$DAGSTER_HOME" >> .env
    echo "cloud_sql_postgres_db=$DB_NAME" >> .env
    echo "cloud_sql_postgres_host=$DB_HOST" >> .env
    # Write the secret values fetched from Secret Manager.
    echo "cloud_sql_user=$$DB_USER" >> .env
    echo "cloud_sql_password=$$DB_PASSWORD" >> .env
    echo "cloud_sql_instance_connection_name=$$INSTANCE_CONNECTION_NAME" >> .env
    echo "gcp_project_id=$$GCP_PROJECT_ID" >> .env
    echo "go_blockchain_ecosystem=$$GH_PAT" >> .env
    echo "bitbucket_api_key=$$BB_KEY" >> .env

# 3. Build the Docker image using the secret file
- name: 'us-central1-docker.pkg.dev/cloud-builders/docker/latest'
  args: [
    'build',
    '--secret=id=env.list,src=.env',
    '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA',
    '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:latest',
    './pipelines'
  ]

# 4. Push the image to Artifact Registry
- name: 'us-central1-docker.pkg.dev/cloud-builders/docker/latest'
  args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app']

# 5. Deploy to GKE by updating the image for the deployment
- name: 'us-central1-docker.pkg.dev/cloud-builders/gke-deploy/latest'
  args:
  - 'run'
  - '--filename=pipelines/k8s/' # Correct path to k8s manifests
  # The --image flag uses the format: KEY_IN_YAML=NEW_IMAGE_WITH_TAG
  - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app=us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA'
  - '--location=us-central1-c'
  - '--cluster=dagster-cluster'

# Defines which images to push after a successful build
images:
- 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:$SHORT_SHA'
- 'us-central1-docker.pkg.dev/$PROJECT_ID/dagster-repo/dagster-app:latest'

# Send logs only to Cloud Logging
options:
  logging: CLOUD_LOGGING_ONLY